[{"name":"app.R","content":"# Load necessary libraries for all applications\nlibrary(shiny)\nlibrary(dplyr)\nlibrary(readr)\nlibrary(DT) # For interactive tables\nlibrary(lubridate) # For date manipulation\nlibrary(ggplot2) # For plotting charts\n\n# Define the path for the CSV file for the Trade Management App\ndata_file_path <- \"trade_data.csv\"\n\n# --- UI Definition for the Combined App ---\nui <- fluidPage(\n  # Add a custom title for the browser tab\n  title = \"Comprehensive Trading Analysis Suite\",\n  \n  # Consolidated CSS styles from all apps\n  tags$head(\n    tags$link(href = \"https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap\", rel = \"stylesheet\"),\n    tags$style(HTML(\"\n      /* General Body and Container Styles (from various apps, harmonized) */\n      body {\n        font-family: 'Inter', sans-serif;\n        background-color: #f0f2f5; /* A light, neutral background */\n        color: #333;\n      }\n      .container-fluid {\n        max-width: 1200px; /* Wider container for more content */\n        margin-top: 20px;\n        background-color: #ffffff;\n        padding: 25px;\n        border-radius: 12px;\n        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);\n      }\n\n      /* Panel Headings and Titles */\n      h1, h2, h3, h4 {\n        color: #0056b3; /* Consistent blue heading */\n        margin-bottom: 25px;\n        font-weight: 600;\n        border-bottom: 1px solid #eee;\n        padding-bottom: 10px;\n      }\n      .panel-heading { /* Specific for RBAF title */\n        font-size: 28px;\n        font-weight: bold;\n        margin-bottom: 30px;\n        color: #333;\n        text-align: center;\n        border-bottom: 2px solid #eee;\n      }\n\n      /* Sidebar and Main Panel General Styles */\n      .sidebar-panel, .main-panel, .panel {\n        background-color: #fdfdfd;\n        padding: 20px;\n        border-radius: 8px;\n        border: 1px solid #e0e0e0;\n        margin-bottom: 20px;\n      }\n      .output-panel { /* Specific for Risk Calculator output */\n        background-color: #e6ffe6; /* Light green background for output */\n        border: 1px solid #c9f0c9;\n        display: flex;\n        flex-direction: column;\n        justify-content: space-around;\n        height: 100%; /* Ensure it takes full height of its column */\n      }\n\n      /* Form Group and Input Styles */\n      .form-group {\n        margin-bottom: 15px;\n      }\n      .control-label, .form-group label {\n        font-weight: 500;\n        color: #555;\n        margin-bottom: 5px;\n      }\n      .form-control, .shiny-input-container input[type='text'],\n      .shiny-input-container input[type='number'],\n      .shiny-input-container select,\n      .shiny-input-container .form-control {\n        border-radius: 8px;\n        border: 1px solid #ddd;\n        padding: 10px 12px;\n        font-size: 16px;\n        width: 100%; /* Full width for inputs */\n        box-sizing: border-box; /* Include padding/border in element's total width */\n      }\n\n      /* Button Styles */\n      .btn-primary, .btn-custom {\n        background-color: #4A90E2; /* Blue */\n        border-color: #4A90E2;\n        color: white;\n        padding: 12px 25px;\n        border-radius: 8px;\n        font-size: 16px;\n        font-weight: 600;\n        transition: background-color 0.2s ease, transform 0.1s ease;\n        width: 100%; /* Full width for buttons in columns */\n        margin-top: 10px;\n      }\n      .btn-primary:hover, .btn-custom:hover {\n        background-color: #357ABD;\n        border-color: #357ABD;\n        transform: translateY(-1px);\n      }\n      .btn-default, .btn-clear {\n        background-color: #e0e0e0; /* Light gray */\n        border-color: #e0e0e0;\n        color: #555;\n        padding: 12px 25px;\n        border-radius: 8px;\n        font-size: 16px;\n        font-weight: 600;\n        transition: background-color 0.2s ease, transform 0.1s ease;\n        width: 100%; /* Full width for buttons in columns */\n        margin-top: 10px;\n      }\n      .btn-default:hover, .btn-clear:hover {\n        background-color: #c0c0c0;\n        border-color: #c0c0c0;\n        transform: translateY(-1px);\n      }\n\n      /* Tab Navigation Styles */\n      .nav-tabs .nav-link {\n        font-weight: 500;\n        color: #666;\n        border-radius: 8px 8px 0 0;\n      }\n      .nav-tabs .nav-link.active {\n        color: #4A90E2;\n        border-bottom: 3px solid #4A90E2;\n        background-color: #f8f8f8;\n      }\n      .tabbable > .nav > li > a { /* For internal tabs in Trade Management */\n        font-weight: 500;\n        color: #666;\n        border-radius: 8px 8px 0 0;\n      }\n      .tabbable > .nav > li.active > a { /* For internal tabs in Trade Management */\n        color: #4A90E2;\n        border-bottom: 3px solid #4A90E2;\n        background-color: #f8f8f8;\n      }\n\n      /* Output Display Styles (RBAF and Risk Calculator) */\n      .output-row { /* RBAF specific */\n        display: flex;\n        justify-content: space-between;\n        padding: 8px 0;\n        border-bottom: 1px solid #eee;\n      }\n      .output-row:last-child {\n        border-bottom: none;\n      }\n      .output-label { /* RBAF specific */\n        font-weight: normal;\n        color: #333;\n      }\n      .output-value { /* RBAF specific */\n        font-weight: bold;\n        color: #000;\n        text-align: right;\n      }\n      .highlight-row { /* RBAF specific */\n        background-color: #e6ffe6; /* Light green for highlighted rows */\n        border-radius: 4px;\n        padding: 8px 10px;\n        margin: 5px 0;\n      }\n      .output-item { /* Risk Calculator specific */\n        display: flex;\n        justify-content: space-between;\n        padding: 8px 0;\n        border-bottom: 1px dashed #d0d0d0;\n      }\n      .output-item:last-child {\n        border-bottom: none;\n      }\n      .output-item .output-label { /* Risk Calculator specific */\n        font-weight: bold;\n        color: #444;\n      }\n      .output-item .output-value { /* Risk Calculator specific */\n        font-weight: bold;\n        color: #007bff;\n      }\n\n      /* DataTables and Tables */\n      .dataTables_wrapper .dataTables_filter input,\n      .dataTables_wrapper .dataTables_length select {\n        border-radius: 8px;\n        border: 1px solid #ddd;\n        padding: 8px 12px;\n      }\n      .r-multiples-table { /* Risk Calculator specific */\n        width: 100%;\n        border-collapse: collapse;\n        margin-top: 20px;\n      }\n      .r-multiples-table th, .r-multiples-table td {\n        border: 1px solid #ddd;\n        padding: 12px 15px;\n        text-align: center;\n      }\n      .r-multiples-table th {\n        background-color: #d4edda; /* Light green header */\n        color: #28a745; /* Darker green text */\n        font-weight: bold;\n      }\n      .r-multiples-table tr:nth-child(even) {\n        background-color: #f9f9f9;\n      }\n      .r-multiples-table tr:hover {\n        background-color: #f1f1f1;\n      }\n      .r-multiples-table .risk-row, .r-multiples-table .gain-row {\n        background-color: #e6ffe6; /* Light green for specific rows */\n        font-weight: bold;\n      }\n      .error-message {\n        color: #dc3545;\n        font-weight: bold;\n        margin-top: 10px;\n      }\n      .help-block {\n        font-size: 0.85em;\n        color: #888;\n        margin-top: 5px;\n      }\n    \"))\n  ),\n  \n  navbarPage(\n    \"Trading Suite\",\n    collapsible = TRUE, # Make navbar collapsible on small screens\n    \n    # --- Tab 1: Result Based Assumption Forecast (RBAF) ---\n    tabPanel(\n      \"RBAF\",\n      icon = icon(\"chart-line\"),\n      div(class = \"panel-heading\", \"Result Based Assumption Forecast (RBAF)\"),\n      sidebarLayout(\n        sidebarPanel(\n          class = \"sidebar-panel\",\n          h4(\"Inputs\"),\n          numericInput(\"rbaf_portfolio_size\", \"Portfolio Size $:\", value = 100000, min = 0),\n          numericInput(\"rbaf_position_size_pct\", \"Position Size %:\", value = 10, min = 0, max = 100),\n          numericInput(\"rbaf_desired_return_pct\", \"Desired % Return:\", value = 40, min = 0, max = 100),\n          numericInput(\"rbaf_avg_gain_pct\", \"Average % Gain:\", value = 12, min = 0),\n          numericInput(\"rbaf_winning_trades_pct\", \"% of Winning Trades:\", value = 40, min = 0, max = 100),\n          numericInput(\"rbaf_avg_loss_pct\", \"Average % Loss:\", value = 6, min = 0),\n          br(),\n          fluidRow(\n            column(6, actionButton(\"rbaf_clear_all\", \"Clear All\", class = \"btn-custom btn-clear\")),\n            column(6, actionButton(\"rbaf_calculate\", \"Calculate\", class = \"btn-custom\"))\n          )\n        ),\n        \n        mainPanel(\n          class = \"main-panel\",\n          h4(\"Results\"),\n          div(class = \"output-container\",\n              div(class = \"output-row\",\n                  div(class = \"output-label\", \"Average $ Gain on Winning Trades:\"),\n                  div(class = \"output-value\", textOutput(\"rbaf_avg_dollar_gain\"))\n              ),\n              div(class = \"output-row\",\n                  div(class = \"output-label\", \"# of Winning Trades:\"),\n                  div(class = \"output-value\", textOutput(\"rbaf_num_winning_trades\"))\n              ),\n              div(class = \"output-row\",\n                  div(class = \"output-label\", \"Average $ Loss on Losing Trades:\"),\n                  div(class = \"output-value\", textOutput(\"rbaf_avg_dollar_loss\"))\n              ),\n              div(class = \"output-row\",\n                  div(class = \"output-label\", \"# of Losing Trades:\"),\n                  div(class = \"output-value\", textOutput(\"rbaf_num_losing_trades\"))\n              ),\n              div(class = \"output-row highlight-row\",\n                  div(class = \"output-label\", \"Gain/Loss Ratio (Non-Adjusted):\"),\n                  div(class = \"output-value\", textOutput(\"rbaf_gain_loss_ratio_non_adj\"))\n              ),\n              div(class = \"output-row\",\n                  div(class = \"output-label\", \"$ Position Size:\"),\n                  div(class = \"output-value\", textOutput(\"rbaf_position_size_dollar\"))\n              ),\n              div(class = \"output-row\",\n                  div(class = \"output-label\", \"Expected Net % Return per Trade:\"),\n                  div(class = \"output-value\", textOutput(\"rbaf_expected_net_return_pct\"))\n              ),\n              div(class = \"output-row\",\n                  div(class = \"output-label\", \"Expected $ Return per Trade:\"),\n                  div(class = \"output-value\", textOutput(\"rbaf_expected_dollar_return\"))\n              ),\n              div(class = \"output-row\",\n                  div(class = \"output-label\", \"$ Goal:\"),\n                  div(class = \"output-value\", textOutput(\"rbaf_dollar_goal\"))\n              ),\n              div(class = \"output-row highlight-row\",\n                  div(class = \"output-label\", \"Number of Trades Needed to Reach Goal:\"),\n                  div(class = \"output-value\", textOutput(\"rbaf_trades_needed\"))\n              ),\n              div(class = \"output-row highlight-row\",\n                  div(class = \"output-label\", \"Gain/Loss Ratio (Adjusted):\"),\n                  div(class = \"output-value\", textOutput(\"rbaf_gain_loss_ratio_adj\"))\n              ),\n              div(class = \"output-row\",\n                  div(class = \"output-label\", \"Optimal f:\"),\n                  div(class = \"output-value\", textOutput(\"rbaf_optimal_f\"))\n              )\n          )\n        )\n      )\n    ),\n    \n    # --- Tab 2: Trade Management App (from add_a_new_trade.R) ---\n    tabPanel(\n      \"Trade Manager\",\n      icon = icon(\"exchange-alt\"),\n      tabsetPanel(\n        id = \"trade_manager_tabs\", # Changed ID to avoid conflict with main_tabs\n        type = \"tabs\",\n        \n        # Tab 1: Add New Trade\n        tabPanel(\n          \"Add New Trade\",\n          icon = icon(\"plus-circle\"),\n          h2(\"ADD NEW TRADE\"),\n          fluidRow(\n            column(6, dateInput(\"tradeDate\", \"DATE *\", value = Sys.Date(), format = \"mm/dd/yyyy\")),\n            column(6, selectInput(\"portfolio\", \"PORTFOLIO\", choices = c(\"My Portfolio\", \"Portfolio A\", \"Portfolio B\"), selected = \"My Portfolio\"))\n          ),\n          fluidRow(\n            column(6, selectInput(\"activity\", \"ACTIVITY *\", choices = c(\"Long\", \"Short\", \"Option Call\", \"Option Put\"), selected = \"Long\")),\n            column(6, textInput(\"symbol\", \"SYMBOL *\", placeholder = \"Enter symbol...\"))\n          ),\n          fluidRow(\n            column(6, numericInput(\"sharesBought\", \"SHARES BOUGHT *\", value = 0, min = 0)),\n            column(6, numericInput(\"entryPrice\", \"ENTRY PRICE *\", value = 0.00, min = 0, step = 0.01))\n          ),\n          fluidRow(\n            column(6, numericInput(\"commission\", \"COMMISSION\", value = 0.00, min = 0, step = 0.01)),\n            column(6, numericInput(\"stopLoss\", \"STOP LOSS\", value = 0.00, min = 0, step = 0.01))\n          ),\n          fluidRow(\n            column(6, numericInput(\"targetPrice\", \"TARGET PRICE\", value = NULL, min = 0, step = 0.01)),\n            column(6, dateInput(\"targetDate\", \"TARGET DATE\", value = NULL, format = \"mm/dd/yyyy\"))\n          ),\n          fluidRow(\n            column(6, dateInput(\"exitDate\", \"EXIT DATE\", value = NULL, format = \"mm/dd/yyyy\")),\n            column(6, numericInput(\"exitPrice\", \"EXIT PRICE\", value = NULL, min = 0, step = 0.01))\n          ),\n          fluidRow(\n            column(12, textInput(\"entryNote\", \"ENTRY NOTE\", placeholder = \"Enter entry note...\"))\n          ),\n          hr(),\n          fluidRow(\n            column(6, actionButton(\"addTrade\", \"ADD NEW TRADE\", class = \"btn-primary w-full\")),\n            column(6, actionButton(\"clearAll\", \"CLEAR ALL\", class = \"btn-default w-full\"))\n          ),\n          br(),\n          textOutput(\"saveStatus\")\n        ),\n        \n        # Tab 2: View/Edit Data\n        tabPanel(\n          \"View/Edit Data\",\n          icon = icon(\"table\"),\n          h2(\"VIEW AND EDIT TRADE DATA\"),\n          DTOutput(\"tradeDataTable\"),\n          br(),\n          downloadButton(\"downloadData\", \"Download Data\", class = \"btn-primary\")\n        ),\n        \n        # Tab 3: Trade Summary\n        tabPanel(\n          \"Trade Summary\",\n          icon = icon(\"chart-bar\"),\n          h2(\"TRADE SUMMARY\"),\n          fluidRow(\n            column(12,\n                   dateRangeInput(\n                     \"summaryDateRange\",\n                     \"Filter by Date:\",\n                     start = Sys.Date() - 30,\n                     end = Sys.Date(),\n                     format = \"mm/dd/yyyy\"\n                   )\n            )\n          ),\n          hr(),\n          DTOutput(\"tradeSummaryTable\")\n        ),\n        \n        # Tab 4: Daily Symbols Summary\n        tabPanel(\n          \"Daily Symbols\",\n          icon = icon(\"calendar-alt\"),\n          h2(\"DAILY TRADING SYMBOLS\"),\n          fluidRow(\n            column(12,\n                   dateRangeInput(\n                     \"dailySymbolsDateRange\",\n                     \"Filter by Date:\",\n                     start = Sys.Date() - 30,\n                     end = Sys.Date(),\n                     format = \"mm/dd/yyyy\"\n                   )\n            )\n          ),\n          hr(),\n          DTOutput(\"dailySymbolsTable\")\n        ),\n        # Tab 5: Portfolio by Symbol Summary\n        tabPanel(\n          \"Portfolio by Symbol\",\n          icon = icon(\"layer-group\"),\n          h2(\"PORTFOLIO SUMMARY BY SYMBOL AND DATE\"),\n          \n          fluidRow(\n            column(12,\n                   dateRangeInput(\n                     \"portfolioSymbolDateRange\",\n                     \"Filter by Date:\",\n                     start = Sys.Date() - 30,\n                     end = Sys.Date(),\n                     format = \"mm/dd/yyyy\"\n                   )\n            )\n          ),\n          \n          hr(),\n          h4(\"Detailed Portfolio Summary (Grouped by Date, Portfolio, Symbol)\"),\n          DTOutput(\"portfolioSymbolSummaryTable\"),\n          br(),\n          downloadButton(\"downloadPortfolioSymbolSummary\", \"Download Full Summary\", class = \"btn-primary\"),\n          \n          hr(),\n          h4(\"Symbols Traded by Date and Portfolio\"),\n          DTOutput(\"symbolsByDatePortfolioTable\"),\n          \n          hr(),\n          h4(\"Symbols Traded by Portfolio\"),\n          DTOutput(\"symbolsByPortfolioTable\"),\n          \n          hr(),\n          h4(\"Performance Breakdown by Activity Type\"),\n          DTOutput(\"portfolioActivitySummaryTable\"),\n          \n          hr(),\n          h4(\"Cumulative Return by Portfolio\"),\n          DTOutput(\"portfolioReturnSummaryTable\")\n        )\n      )\n    ),\n    \n    # --- Tab 3: $ Risk Calculator (from position_sizing.R) ---\n    tabPanel(\n      \"Risk Calculator\",\n      icon = icon(\"calculator\"),\n      titlePanel(h1(\"$ Risk Calculator\")),\n      fluidRow(\n        column(width = 6, class = \"panel input-panel\",\n               textInput(\"rc_symbol\", \"Symbol:\", value = \"xyzc\"), # Renamed for clarity\n               numericInput(\"rc_portfolio_size\", \"Portfolio Size $:\", value = 100000, min = 0),\n               numericInput(\"rc_share_price\", \"Share Price:\", value = 100, min = 0),\n               numericInput(\"rc_stop_price\", \"**Stop Price:\", value = 95, min = 0),\n               div(class = \"help-block\", \"** Must be less than share price\"),\n               numericInput(\"rc_amount_to_risk\", \"$ Amount to Risk:\", value = 1000, min = 0),\n               \n               fluidRow(\n                 column(width = 6, actionButton(\"rc_clear_all\", \"Clear All\", class = \"btn-default\")),\n                 column(width = 6, actionButton(\"rc_calculate\", \"Calculate\", class = \"btn-primary\"))\n               ),\n               uiOutput(\"rc_stop_price_error\") # Placeholder for stop price error message\n        ),\n        \n        column(width = 6, class = \"panel output-panel\",\n               div(class = \"output-item\", span(class = \"output-label\", \"$ Stop Amount:\"), textOutput(\"rc_stop_amount\", inline = TRUE)),\n               div(class = \"output-item\", span(class = \"output-label\", \"# of Share to Buy:\"), textOutput(\"rc_num_shares\", inline = TRUE)),\n               div(class = \"output-item\", span(class = \"output-label\", \"$ Amt Position:\"), textOutput(\"rc_amt_position\", inline = TRUE)),\n               div(class = \"output-item\", span(class = \"output-label\", \"Position Size %:\"), textOutput(\"rc_position_size_pct\", inline = TRUE)),\n               div(class = \"output-item\", span(class = \"output-label\", \"Risk as a % of Equity:\"), textOutput(\"rc_risk_equity_pct\", inline = TRUE))\n        )\n      ),\n      \n      fluidRow(\n        column(width = 12,\n               h2(\"R-Multiples Analysis\", style = \"margin-top: 30px; color: #0056b3;\"),\n               tableOutput(\"rc_r_multiples_table\")\n        )\n      )\n    ),\n    \n    # --- Tab 4: DRMA Analysis (from drma_plot_gemini.R) ---\n    tabPanel(\n      \"DRMA Analysis\",\n      icon = icon(\"chart-area\"),\n      titlePanel(\"DRMA Analysis of Trading Data\"),\n      \n      sidebarLayout(\n        sidebarPanel(\n          fileInput(\"drma_file1\", \"Upload CSV File\", # Renamed for clarity\n                    multiple = FALSE,\n                    accept = c(\"text/csv\",\n                               \"text/comma-separated-values,text/plain\",\n                               \".csv\")),\n          tags$hr(),\n          dateInput(\"drma_startDate\", \"Start Date:\", value = Sys.Date() - 365), # Renamed for clarity\n          dateInput(\"drma_endDate\", \"End Date:\", value = Sys.Date()), # Renamed for clarity\n          tags$hr(),\n          helpText(\"Upload your trading data in CSV format. The CSV should contain columns like 'profit_loss', 'buy_amount', 'buy_date', and 'status'.\")\n        ),\n        \n        mainPanel(\n          h3(\"DRMA Table\"),\n          DTOutput(\"drma_drmaTable\"), # Renamed for clarity\n          br(),\n          h4(\"Total # of Complete Trades:\"),\n          textOutput(\"drma_totalTrades\"), # Renamed for clarity\n          br(),\n          plotOutput(\"drma_gainsLossesPlot\"), # Renamed for clarity\n          br(),\n          plotOutput(\"drma_drmaCurvePlot\") # Renamed for clarity\n        )\n      )\n    )\n  )\n)\n\n# --- Server Logic for the Combined App ---\nserver <- function(input, output, session) {\n  \n  # --- Server Logic for RBAF App ---\n  rbaf_calculations <- eventReactive(input$rbaf_calculate, {\n    portfolio_size <- input$rbaf_portfolio_size\n    position_size_pct <- input$rbaf_position_size_pct / 100\n    desired_return_pct <- input$rbaf_desired_return_pct / 100\n    avg_gain_pct <- input$rbaf_avg_gain_pct / 100\n    winning_trades_pct <- input$rbaf_winning_trades_pct / 100\n    avg_loss_pct <- input$rbaf_avg_loss_pct / 100\n    \n    if (avg_loss_pct == 0) avg_loss_pct <- 1e-9\n    if (winning_trades_pct == 0 && avg_loss_pct == 0) {\n      avg_loss_pct <- 1e-9\n      avg_gain_pct <- 1e-9\n    }\n    \n    avg_dollar_gain_on_winning_trades <- avg_gain_pct * (portfolio_size * position_size_pct)\n    avg_dollar_loss_on_losing_trades <- avg_loss_pct * (portfolio_size * position_size_pct)\n    gain_loss_ratio_non_adj <- avg_gain_pct / avg_loss_pct\n    dollar_position_size <- portfolio_size * position_size_pct\n    expected_net_return_pct_per_trade <- (winning_trades_pct * avg_gain_pct) - ((1 - winning_trades_pct) * avg_loss_pct)\n    expected_dollar_return_per_trade <- expected_net_return_pct_per_trade * dollar_position_size\n    dollar_goal <- desired_return_pct * portfolio_size\n    \n    trades_needed <- if (expected_dollar_return_per_trade != 0) {\n      dollar_goal / expected_dollar_return_per_trade\n    } else {\n      Inf\n    }\n    \n    num_winning_trades <- trades_needed * winning_trades_pct\n    num_losing_trades <- trades_needed * (1 - winning_trades_pct)\n    \n    denominator_adj_ratio <- (1 - winning_trades_pct) * avg_loss_pct\n    gain_loss_ratio_adj <- if (denominator_adj_ratio != 0) {\n      (winning_trades_pct * avg_gain_pct) / denominator_adj_ratio\n    } else {\n      Inf\n    }\n    \n    optimal_f <- if (gain_loss_ratio_non_adj != 0) {\n      winning_trades_pct - ((1 - winning_trades_pct) / gain_loss_ratio_non_adj)\n    } else {\n      0\n    }\n    optimal_f <- max(0, optimal_f)\n    \n    list(\n      avg_dollar_gain = avg_dollar_gain_on_winning_trades,\n      num_winning_trades = num_winning_trades,\n      avg_dollar_loss = avg_dollar_loss_on_losing_trades,\n      num_losing_trades = num_losing_trades,\n      gain_loss_ratio_non_adj = gain_loss_ratio_non_adj,\n      position_size_dollar = dollar_position_size,\n      expected_net_return_pct = expected_net_return_pct_per_trade * 100,\n      expected_dollar_return = expected_dollar_return_per_trade,\n      dollar_goal = dollar_goal,\n      trades_needed = trades_needed,\n      gain_loss_ratio_adj = gain_loss_ratio_adj,\n      optimal_f = optimal_f * 100\n    )\n  })\n  \n  output$rbaf_avg_dollar_gain <- renderText({\n    paste0(\"$\", format(round(rbaf_calculations()$avg_dollar_gain, 2), nsmall = 2, big.mark = \",\"))\n  })\n  output$rbaf_num_winning_trades <- renderText({\n    format(round(rbaf_calculations()$num_winning_trades), big.mark = \",\")\n  })\n  output$rbaf_avg_dollar_loss <- renderText({\n    paste0(\"$\", format(round(rbaf_calculations()$avg_dollar_loss, 2), nsmall = 2, big.mark = \",\"))\n  })\n  output$rbaf_num_losing_trades <- renderText({\n    format(round(rbaf_calculations()$num_losing_trades), big.mark = \",\")\n  })\n  output$rbaf_gain_loss_ratio_non_adj <- renderText({\n    format(round(rbaf_calculations()$gain_loss_ratio_non_adj, 2), nsmall = 2)\n  })\n  output$rbaf_position_size_dollar <- renderText({\n    paste0(\"$\", format(round(rbaf_calculations()$position_size_dollar, 2), nsmall = 2, big.mark = \",\"))\n  })\n  output$rbaf_expected_net_return_pct <- renderText({\n    paste0(format(round(rbaf_calculations()$expected_net_return_pct, 2), nsmall = 2), \"%\")\n  })\n  output$rbaf_expected_dollar_return <- renderText({\n    paste0(\"$\", format(round(rbaf_calculations()$expected_dollar_return, 2), nsmall = 2, big.mark = \",\"))\n  })\n  output$rbaf_dollar_goal <- renderText({\n    paste0(\"$\", format(round(rbaf_calculations()$dollar_goal, 2), nsmall = 2, big.mark = \",\"))\n  })\n  output$rbaf_trades_needed <- renderText({\n    if (is.infinite(rbaf_calculations()$trades_needed)) {\n      \"N/A (Cannot reach goal)\"\n    } else {\n      format(round(rbaf_calculations()$trades_needed), big.mark = \",\")\n    }\n  })\n  output$rbaf_gain_loss_ratio_adj <- renderText({\n    format(round(rbaf_calculations()$gain_loss_ratio_adj, 2), nsmall = 2)\n  })\n  output$rbaf_optimal_f <- renderText({\n    paste0(format(round(rbaf_calculations()$optimal_f, 2), nsmall = 2), \"%\")\n  })\n  \n  observeEvent(input$rbaf_clear_all, {\n    updateNumericInput(session, \"rbaf_portfolio_size\", value = 0)\n    updateNumericInput(session, \"rbaf_position_size_pct\", value = 0)\n    updateNumericInput(session, \"rbaf_desired_return_pct\", value = 0)\n    updateNumericInput(session, \"rbaf_avg_gain_pct\", value = 0)\n    updateNumericInput(session, \"rbaf_winning_trades_pct\", value = 0)\n    updateNumericInput(session, \"rbaf_avg_loss_pct\", value = 0)\n  })\n  \n  # --- Server Logic for Trade Management App ---\n  trade_data <- reactiveVal(\n    if (file.exists(data_file_path)) {\n      read_csv(data_file_path, show_col_types = FALSE)\n    } else {\n      data.frame(\n        Date = as.Date(character()),\n        Portfolio = character(),\n        Activity = character(),\n        Symbol = character(),\n        SharesBought = numeric(),\n        EntryPrice = numeric(),\n        Commission = numeric(),\n        EntryNote = character(),\n        StopLoss = numeric(),\n        TargetPrice = numeric(),\n        TargetDate = as.Date(character()),\n        ExitDate = as.Date(character()),\n        ExitPrice = numeric(),\n        stringsAsFactors = FALSE\n      )\n    }\n  )\n  \n  save_data <- function(data) {\n    write_csv(data, data_file_path)\n  }\n  \n  observeEvent(input$addTrade, {\n    if (is.null(input$symbol) || input$symbol == \"\" ||\n        is.null(input$sharesBought) || input$sharesBought == 0 ||\n        is.null(input$entryPrice) || input$entryPrice == 0) {\n      output$saveStatus <- renderText({\n        \"Please fill in all required fields (Date, Symbol, Shares Bought, Entry Price).\"\n      })\n      return()\n    }\n    \n    calculated_target_price <- if (is.null(input$targetPrice) || input$targetPrice == 0) {\n      input$entryPrice * 1.08\n    } else {\n      input$targetPrice\n    }\n    \n    calculated_target_date <- if (is.null(input$targetDate)) {\n      input$tradeDate + 3\n    } else {\n      input$targetDate\n    }\n    \n    new_trade_row <- data.frame(\n      Date = as.Date(input$tradeDate),\n      Portfolio = input$portfolio,\n      Activity = input$activity,\n      Symbol = toupper(input$symbol),\n      SharesBought = input$sharesBought,\n      EntryPrice = input$entryPrice,\n      Commission = input$commission,\n      EntryNote = input$entryNote,\n      StopLoss = input$stopLoss,\n      TargetPrice = calculated_target_price,\n      TargetDate = calculated_target_date,\n      ExitDate = if (is.null(input$exitDate)) as.Date(NA) else as.Date(input$exitDate),\n      ExitPrice = if (is.na(input$exitPrice)) as.numeric(NA) else input$exitPrice,\n      stringsAsFactors = FALSE\n    )\n    \n    current_data <- trade_data()\n    updated_data <- rbind(current_data, new_trade_row)\n    trade_data(updated_data)\n    save_data(updated_data)\n    \n    output$saveStatus <- renderText({\n      paste(\"Trade for\", input$symbol, \"added successfully!\")\n    })\n    \n    updateDateInput(session, \"tradeDate\", value = Sys.Date())\n    updateSelectInput(session, \"portfolio\", selected = \"My Portfolio\")\n    updateSelectInput(session, \"activity\", selected = \"Long\")\n    updateTextInput(session, \"symbol\", value = \"\")\n    updateNumericInput(session, \"sharesBought\", value = 0)\n    updateNumericInput(session, \"entryPrice\", value = 0.00)\n    updateNumericInput(session, \"commission\", value = 0.00)\n    updateTextInput(session, \"entryNote\", value = \"\")\n    updateNumericInput(session, \"stopLoss\", value = 0.00)\n    updateNumericInput(session, \"targetPrice\", value = NULL)\n    updateDateInput(session, \"targetDate\", value = NULL)\n    updateDateInput(session, \"exitDate\", value = NULL)\n    updateNumericInput(session, \"exitPrice\", value = NULL)\n  })\n  \n  observeEvent(input$clearAll, {\n    updateDateInput(session, \"tradeDate\", value = Sys.Date())\n    updateSelectInput(session, \"portfolio\", selected = \"My Portfolio\")\n    updateSelectInput(session, \"activity\", selected = \"Long\")\n    updateTextInput(session, \"symbol\", value = \"\")\n    updateNumericInput(session, \"sharesBought\", value = 0)\n    updateNumericInput(session, \"entryPrice\", value = 0.00)\n    updateNumericInput(session, \"commission\", value = 0.00)\n    updateTextInput(session, \"entryNote\", value = \"\")\n    updateNumericInput(session, \"stopLoss\", value = 0.00)\n    updateNumericInput(session, \"targetPrice\", value = NULL)\n    updateDateInput(session, \"targetDate\", value = NULL)\n    updateDateInput(session, \"exitDate\", value = NULL)\n    updateNumericInput(session, \"exitPrice\", value = NULL)\n    \n    output$saveStatus <- renderText({\n      \"All fields cleared.\"\n    })\n  })\n  \n  output$tradeDataTable <- renderDT({\n    datatable(\n      trade_data(),\n      editable = TRUE,\n      options = list(\n        pageLength = 10,\n        scrollX = TRUE\n      ),\n      rownames = FALSE,\n      selection = 'none'\n    )\n  })\n  \n  observeEvent(input$tradeDataTable_cell_edit, {\n    info <- input$tradeDataTable_cell_edit\n    row_index <- info$row\n    col_index <- info$col + 1\n    new_value <- info$value\n    \n    current_data <- trade_data()\n    col_name <- names(current_data)[col_index]\n    updated_value <- NA\n    \n    if (col_name %in% c(\"SharesBought\", \"EntryPrice\", \"Commission\", \"StopLoss\", \"TargetPrice\", \"ExitPrice\")) {\n      updated_value <- if (new_value == \"\") NA else suppressWarnings(as.numeric(new_value))\n      if (is.na(updated_value) && new_value != \"\") {\n        showNotification(paste(\"Invalid input for numeric field '\", col_name, \"'.\"), type = \"error\")\n        return()\n      }\n    } else if (col_name %in% c(\"Date\", \"TargetDate\", \"ExitDate\")) {\n      updated_value <- if (new_value == \"\") as.Date(NA) else tryCatch(as.Date(new_value), error = function(e) NA)\n      if (is.na(updated_value) && new_value != \"\") {\n        showNotification(paste(\"Invalid date format for '\", col_name, \"'.\"), type = \"error\")\n        return()\n      }\n    } else {\n      updated_value <- as.character(new_value)\n    }\n    \n    temp_data <- current_data\n    temp_data[row_index, col_index] <- updated_value\n    trade_data(temp_data)\n    save_data(temp_data)\n    showNotification(\"Trade data updated and saved successfully!\", type = \"message\", duration = 2)\n  })\n  \n  \n  output$downloadData <- downloadHandler(\n    filename = function() {\n      paste(\"trade_data-\", Sys.Date(), \".csv\", sep = \"\")\n    },\n    content = function(file) {\n      write_csv(trade_data(), file)\n    }\n  )\n  \n  filtered_summary_data <- reactive({\n    req(input$summaryDateRange)\n    data <- trade_data()\n    if (!is.null(input$summaryDateRange[1]) && !is.null(input$summaryDateRange[2])) {\n      data <- data %>%\n        filter(Date >= input$summaryDateRange[1] & Date <= input$summaryDateRange[2])\n    }\n    data\n  })\n  \n  summarized_trades <- reactive({\n    filtered_summary_data() %>%\n      group_by(Date, Symbol, Activity) %>%\n      summarise(\n        TotalShares = sum(SharesBought, na.rm = TRUE),\n        WeightedAvgEntryPrice = sum(EntryPrice * SharesBought, na.rm = TRUE) / sum(SharesBought, na.rm = TRUE),\n        TotalCommission = sum(Commission, na.rm = TRUE),\n        AvgTargetPrice = mean(TargetPrice, na.rm = TRUE),\n        AvgExitPrice = mean(ExitPrice, na.rm = TRUE),\n        .groups = 'drop'\n      ) %>%\n      arrange(Date, Symbol)\n  })\n  \n  output$tradeSummaryTable <- renderDT({\n    datatable(\n      summarized_trades(),\n      options = list(\n        pageLength = 10,\n        scrollX = TRUE\n      ),\n      rownames = FALSE,\n      selection = 'none'\n    )\n  })\n  \n  filtered_daily_symbols_data <- reactive({\n    req(input$dailySymbolsDateRange)\n    data <- trade_data()\n    if (!is.null(input$dailySymbolsDateRange[1]) && !is.null(input$dailySymbolsDateRange[2])) {\n      data <- data %>%\n        filter(Date >= input$dailySymbolsDateRange[1] & Date <= input$dailySymbolsDateRange[2])\n    }\n    data\n  })\n  \n  daily_summarized_symbols <- reactive({\n    filtered_daily_symbols_data() %>%\n      group_by(Date) %>%\n      summarise(\n        Symbols = paste(sort(unique(Symbol)), collapse = \", \"),\n        .groups = 'drop'\n      ) %>%\n      arrange(Date)\n  })\n  \n  output$dailySymbolsTable <- renderDT({\n    datatable(\n      daily_summarized_symbols(),\n      options = list(\n        pageLength = 10,\n        scrollX = TRUE,\n        dom = 'tp'\n      ),\n      rownames = FALSE,\n      selection = 'none'\n    )\n  })\n  \n  filtered_portfolio_symbol_data <- reactive({\n    req(input$portfolioSymbolDateRange)\n    data <- trade_data()\n    if (!is.null(input$portfolioSymbolDateRange[1]) && !is.null(input$portfolioSymbolDateRange[2])) {\n      data <- data %>%\n        filter(Date >= input$portfolioSymbolDateRange[1] & Date <= input$portfolioSymbolDateRange[2])\n    }\n    data\n  })\n  \n  portfolio_symbol_summary <- reactive({\n    filtered_portfolio_symbol_data() %>%\n      mutate(\n        RealizedGain = round(ifelse(!is.na(ExitPrice), (ExitPrice - EntryPrice) * SharesBought, 0),2),\n        UnrealizedGain = round(ifelse(is.na(ExitPrice) | ExitPrice == 0, (TargetPrice - EntryPrice) * SharesBought, 0),2),\n        EntryValue = EntryPrice * SharesBought,\n        NetPL = RealizedGain + UnrealizedGain - Commission,\n        ReturnPct = round(ifelse(EntryValue > 0, NetPL / EntryValue * 100, NA),2)\n      ) %>%\n      group_by(Date, Portfolio, Symbol) %>%\n      summarise(\n        TotalShares = sum(SharesBought, na.rm = TRUE),\n        AvgEntryPrice = mean(EntryPrice, na.rm = TRUE),\n        TotalCommission = sum(Commission, na.rm = TRUE),\n        AvgTargetPrice = mean(TargetPrice, na.rm = TRUE),\n        AvgExitPrice = mean(ExitPrice, na.rm = TRUE),\n        RealizedGain = sum(RealizedGain, na.rm = TRUE),\n        UnrealizedGain = sum(UnrealizedGain, na.rm = TRUE),\n        NetPL = sum(NetPL, na.rm = TRUE),\n        ReturnPct = mean(ReturnPct, na.rm = TRUE),\n        .groups = 'drop'\n      ) %>%\n      arrange(Date, Portfolio, Symbol)\n  })\n  \n  symbols_by_date_portfolio <- reactive({\n    filtered_portfolio_symbol_data() %>%\n      group_by(Date, Portfolio) %>%\n      summarise(\n        Symbols = paste(sort(unique(Symbol)), collapse = \", \"),\n        .groups = 'drop'\n      ) %>%\n      arrange(Date, Portfolio)\n  })\n  \n  symbols_by_portfolio <- reactive({\n    filtered_portfolio_symbol_data() %>%\n      group_by(Portfolio) %>%\n      summarise(\n        Symbols = paste(sort(unique(Symbol)), collapse = \", \"),\n        .groups = 'drop'\n      ) %>%\n      arrange(Portfolio)\n  })\n  \n  output$portfolioSymbolSummaryTable <- renderDT({\n    datatable(\n      portfolio_symbol_summary(),\n      options = list(pageLength = 10, scrollX = TRUE),\n      rownames = FALSE,\n      selection = 'none'\n    )\n  })\n  \n  output$symbolsByDatePortfolioTable <- renderDT({\n    datatable(\n      symbols_by_date_portfolio(),\n      options = list(pageLength = 10, scrollX = TRUE, dom = 'tp'),\n      rownames = FALSE,\n      selection = 'none'\n    )\n  })\n  \n  output$symbolsByPortfolioTable <- renderDT({\n    datatable(\n      symbols_by_portfolio(),\n      options = list(pageLength = 10, scrollX = TRUE, dom = 'tp'),\n      rownames = FALSE,\n      selection = 'none'\n    )\n  })\n  \n  output$downloadPortfolioSymbolSummary <- downloadHandler(\n    filename = function() {\n      paste(\"portfolio_symbol_summary-\", Sys.Date(), \".csv\", sep = \"\")\n    },\n    content = function(file) {\n      write_csv(portfolio_symbol_summary(), file)\n    }\n  )\n  \n  portfolio_activity_summary <- reactive({\n    filtered_portfolio_symbol_data() %>%\n      mutate(\n        RealizedGain = ifelse(!is.na(ExitPrice), (ExitPrice - EntryPrice) * SharesBought, 0),\n        UnrealizedGain = ifelse(is.na(ExitPrice) | ExitPrice == 0, (TargetPrice - EntryPrice) * SharesBought, 0),\n        EntryValue = EntryPrice * SharesBought,\n        NetPL = RealizedGain + UnrealizedGain - Commission,\n        ReturnPct = ifelse(EntryValue > 0, NetPL / EntryValue * 100, NA)\n      ) %>%\n      group_by(Portfolio, Activity) %>%\n      summarise(\n        TotalTrades = n(),\n        TotalShares = sum(SharesBought, na.rm = TRUE),\n        RealizedGain = sum(RealizedGain, na.rm = TRUE),\n        UnrealizedGain = sum(UnrealizedGain, na.rm = TRUE),\n        TotalCommission = sum(Commission, na.rm = TRUE),\n        NetPL = sum(NetPL, na.rm = TRUE),\n        AvgReturnPct = mean(ReturnPct, na.rm = TRUE),\n        .groups = 'drop'\n      ) %>%\n      arrange(Portfolio, Activity)\n  })\n  \n  portfolio_return_summary <- reactive({\n    filtered_portfolio_symbol_data() %>%\n      mutate(\n        RealizedGain = ifelse(!is.na(ExitPrice), (ExitPrice - EntryPrice) * SharesBought, 0),\n        UnrealizedGain = ifelse(is.na(ExitPrice) | ExitPrice == 0, (TargetPrice - EntryPrice) * SharesBought, 0),\n        EntryValue = EntryPrice * SharesBought,\n        NetPL = RealizedGain + UnrealizedGain - Commission\n      ) %>%\n      group_by(Portfolio) %>%\n      summarise(\n        TotalEntryValue = sum(EntryValue, na.rm = TRUE),\n        TotalRealized = sum(RealizedGain, na.rm = TRUE),\n        TotalUnrealized = sum(UnrealizedGain, na.rm = TRUE),\n        TotalCommission = sum(Commission, na.rm = TRUE),\n        TotalNetPL = sum(NetPL, na.rm = TRUE),\n        CumulativeReturnPct = ifelse(TotalEntryValue > 0, TotalNetPL / TotalEntryValue * 100, NA),\n        .groups = 'drop'\n      ) %>%\n      arrange(Portfolio)\n  })\n  \n  output$portfolioActivitySummaryTable <- renderDT({\n    datatable(\n      portfolio_activity_summary(),\n      options = list(pageLength = 10, scrollX = TRUE),\n      rownames = FALSE\n    ) %>%\n      formatCurrency(c(\"RealizedGain\", \"UnrealizedGain\", \"NetPL\", \"TotalCommission\"), \"$\") %>%\n      formatPercentage(\"AvgReturnPct\", digits = 2)\n  })\n  \n  output$portfolioReturnSummaryTable <- renderDT({\n    datatable(\n      portfolio_return_summary(),\n      options = list(pageLength = 10, scrollX = TRUE),\n      rownames = FALSE\n    ) %>%\n      formatCurrency(c(\"TotalRealized\", \"TotalUnrealized\", \"TotalNetPL\", \"TotalCommission\", \"TotalEntryValue\"), \"$\") %>%\n      formatPercentage(\"CumulativeReturnPct\", digits = 2)\n  })\n  \n  \n  # --- Server Logic for $ Risk Calculator App ---\n  rc_output_values <- reactiveValues( # Renamed reactiveValues object\n    stop_amount = \"\",\n    num_shares = \"\",\n    amt_position = \"\",\n    position_size_pct = \"\",\n    risk_equity_pct = \"\",\n    r_multiples_data = data.frame(\n      Metric = c(\"Risk\", \"Upside target based on R\", \"% Gain\"),\n      `1R` = rep(\"\", 3),\n      `2R` = rep(\"\", 3),\n      `3R` = rep(\"\", 3),\n      `4R` = rep(\"\", 3),\n      `5R` = rep(\"\", 3),\n      `6R` = rep(\"\", 3),\n      check.names = FALSE\n    )\n  )\n  \n  rc_stop_price_valid <- reactive({\n    input$rc_stop_price < input$rc_share_price\n  })\n  \n  output$rc_stop_price_error <- renderUI({\n    if (!is.null(input$rc_stop_price) && !is.null(input$rc_share_price) && !rc_stop_price_valid()) {\n      tags$p(class = \"error-message\", \"Error: Stop Price must be less than Share Price.\")\n    } else {\n      NULL\n    }\n  })\n  \n  observeEvent(input$rc_calculate, {\n    req(input$rc_portfolio_size, input$rc_share_price, input$rc_stop_price, input$rc_amount_to_risk)\n    \n    portfolio_size <- as.numeric(input$rc_portfolio_size)\n    share_price <- as.numeric(input$rc_share_price)\n    stop_price <- as.numeric(input$rc_stop_price)\n    amount_to_risk <- as.numeric(input$rc_amount_to_risk)\n    \n    if (!rc_stop_price_valid()) {\n      rc_output_values$stop_amount = \"\"\n      rc_output_values$num_shares = \"\"\n      rc_output_values$amt_position = \"\"\n      rc_output_values$position_size_pct = \"\"\n      rc_output_values$risk_equity_pct = \"\"\n      rc_output_values$r_multiples_data = data.frame(\n        Metric = c(\"Risk\", \"Upside target based on R\", \"% Gain\"),\n        `1R` = rep(\"\", 3), `2R` = rep(\"\", 3), `3R` = rep(\"\", 3),\n        `4R` = rep(\"\", 3), `5R` = rep(\"\", 3), `6R` = rep(\"\", 3),\n        check.names = FALSE\n      )\n      return()\n    }\n    \n    calculated_stop_amount <- share_price - stop_price\n    calculated_num_shares <- if (calculated_stop_amount > 0) floor(amount_to_risk / calculated_stop_amount) else 0\n    calculated_amt_position <- calculated_num_shares * share_price\n    calculated_position_size_pct <- if (portfolio_size > 0) (calculated_amt_position / portfolio_size) * 100 else 0\n    calculated_risk_equity_pct <- if (portfolio_size > 0) (amount_to_risk / portfolio_size) * 100 else 0\n    \n    rc_output_values$stop_amount <- sprintf(\"%.2f\", calculated_stop_amount)\n    rc_output_values$num_shares <- as.integer(calculated_num_shares)\n    rc_output_values$amt_position <- sprintf(\"$%.2f\", calculated_amt_position)\n    rc_output_values$position_size_pct <- sprintf(\"%.2f%%\", calculated_position_size_pct)\n    rc_output_values$risk_equity_pct <- sprintf(\"%.2f%%\", calculated_risk_equity_pct)\n    \n    r_multiples <- 1:6\n    risk_amounts <- amount_to_risk * r_multiples\n    upside_targets <- share_price + (r_multiples * calculated_stop_amount)\n    percent_gains <- if (share_price > 0) (r_multiples * calculated_stop_amount / share_price) * 100 else 0\n    \n    r_table_data <- data.frame(Metric = c(\"Risk\", \"Upside target based on R\", \"% Gain\"), check.names = FALSE)\n    for (i in r_multiples) {\n      col_name <- paste0(i, \"R\")\n      r_table_data[[col_name]] <- c(\n        sprintf(\"$%.2f\", risk_amounts[i]),\n        sprintf(\"$%.2f\", upside_targets[i]),\n        sprintf(\"%.2f%%\", percent_gains[i])\n      )\n    }\n    rc_output_values$r_multiples_data <- r_table_data\n  })\n  \n  observeEvent(input$rc_clear_all, {\n    updateTextInput(session, \"rc_symbol\", value = \"\")\n    updateNumericInput(session, \"rc_portfolio_size\", value = 0)\n    updateNumericInput(session, \"rc_share_price\", value = 0)\n    updateNumericInput(session, \"rc_stop_price\", value = 0)\n    updateNumericInput(session, \"rc_amount_to_risk\", value = 0)\n    \n    rc_output_values$stop_amount = \"\"\n    rc_output_values$num_shares = \"\"\n    rc_output_values$amt_position = \"\"\n    rc_output_values$position_size_pct = \"\"\n    rc_output_values$risk_equity_pct = \"\"\n    rc_output_values$r_multiples_data = data.frame(\n      Metric = c(\"Risk\", \"Upside target based on R\", \"% Gain\"),\n      `1R` = rep(\"\", 3), `2R` = rep(\"\", 3), `3R` = rep(\"\", 3),\n      `4R` = rep(\"\", 3), `5R` = rep(\"\", 3), `6R` = rep(\"\", 3),\n      check.names = FALSE\n    )\n  })\n  \n  output$rc_stop_amount <- renderText({ rc_output_values$stop_amount })\n  output$rc_num_shares <- renderText({ rc_output_values$num_shares })\n  output$rc_amt_position <- renderText({ rc_output_values$amt_position })\n  output$rc_position_size_pct <- renderText({ rc_output_values$position_size_pct })\n  output$rc_risk_equity_pct <- renderText({ rc_output_values$risk_equity_pct })\n  output$rc_r_multiples_table <- renderTable({\n    rc_output_values$r_multiples_data\n  }, bordered = TRUE, striped = TRUE, hover = TRUE, spacing = \"l\", align = \"c\", class = \"r-multiples-table\")\n  \n  # --- Server Logic for DRMA Analysis App ---\n  drma_filtered_data <- reactive({\n    req(input$drma_file1)\n    df <- read_csv(input$drma_file1$datapath, show_col_types = FALSE)\n    \n    if (!\"buy_date\" %in% colnames(df)) {\n      showNotification(\"Error: 'buy_date' column not found in the uploaded CSV. Please ensure your file has this column.\", type = \"error\", duration = NULL)\n      return(data.frame())\n    }\n    \n    df$buy_date <- tryCatch({\n      ymd(df$buy_date)\n    }, error = function(e) {\n      showNotification(paste(\"Error converting 'buy_date' column:\", e$message), type = \"error\", duration = NULL)\n      rep(NA_Date_, nrow(df))\n    }, warning = function(w) {\n      showNotification(paste(\"Warning converting 'buy_date' column:\", w$message), type = \"warning\", duration = 5)\n      ymd(df$buy_date)\n    })\n    \n    df_filtered_na_dates <- df %>% filter(!is.na(buy_date))\n    if (nrow(df_filtered_na_dates) < nrow(df)) {\n      showNotification(paste(nrow(df) - nrow(df_filtered_na_dates), \"rows were removed due to unparseable 'buy_date' values.\"), type = \"warning\", duration = 5)\n    }\n    \n    df_complete <- df_filtered_na_dates %>%\n      filter(status == \"COMPLETE\",\n             buy_date >= input$drma_startDate,\n             buy_date <= input$drma_endDate)\n    \n    df_complete <- df_complete %>%\n      mutate(profit_loss_percentage = (profit_loss / buy_amount) * 100)\n    df_complete\n  })\n  \n  drma_results <- reactive({\n    df <- drma_filtered_data()\n    total_complete_trades <- nrow(df)\n    \n    if (total_complete_trades == 0) {\n      empty_df_drma <- data.frame(\n        Range = character(),\n        `# Gains` = numeric(),\n        `# Losses` = numeric(),\n        `% Up` = character(),\n        `% Down` = character(),\n        `Net %` = character(),\n        DRMA = numeric(),\n        stringsAsFactors = FALSE,\n        check.names = FALSE\n      )\n      empty_df_hist <- data.frame(\n        Range = character(),\n        Count = numeric(),\n        stringsAsFactors = FALSE,\n        check.names = FALSE\n      )\n      return(list(drma_table_df = empty_df_drma, drma_full_df = empty_df_drma, hist_summary_df = empty_df_hist))\n    }\n    \n    drma_numeric_breaks <- seq(-40, 40, by = 2)\n    drma_range_labels <- character(length(drma_numeric_breaks) - 1)\n    for (k in 1:(length(drma_numeric_breaks) - 1)) {\n      lower <- drma_numeric_breaks[k]\n      upper <- drma_numeric_breaks[k+1]\n      drma_range_labels[k] <- paste0(lower, \"-\", upper, \"%\")\n    }\n    \n    drma_full_results_list <- list()\n    for (k in 1:(length(drma_numeric_breaks) - 1)) {\n      lower_bound <- drma_numeric_breaks[k]\n      upper_bound <- drma_numeric_breaks[k+1]\n      current_range_label <- drma_range_labels[k]\n      \n      num_gains_for_drma <- 0\n      num_losses_for_drma <- 0\n      \n      if (lower_bound >= 0) {\n        num_gains_for_drma <- df %>%\n          filter(profit_loss_percentage >= lower_bound & profit_loss_percentage < upper_bound) %>%\n          nrow()\n      } else {\n        num_losses_for_drma <- df %>%\n          filter(profit_loss_percentage <= upper_bound & profit_loss_percentage > lower_bound) %>%\n          nrow()\n      }\n      \n      percent_up <- (num_gains_for_drma / total_complete_trades) * 100\n      percent_down <- (num_losses_for_drma / total_complete_trades) * 100\n      \n      net_percent <- percent_up - percent_down\n      total_observations_in_range_for_drma <- num_gains_for_drma + num_losses_for_drma\n      \n      drma_value <- (net_percent / 100) * total_observations_in_range_for_drma\n      \n      drma_full_results_list[[current_range_label]] <- data.frame(\n        Range = current_range_label,\n        `# Gains` = num_gains_for_drma,\n        `# Losses` = num_losses_for_drma,\n        `% Up` = sprintf(\"%.2f%%\", percent_up),\n        `% Down` = sprintf(\"%.2f%%\", percent_down),\n        `Net %` = sprintf(\"%.2f%%\", net_percent),\n        DRMA = round(drma_value, 2),\n        stringsAsFactors = FALSE,\n        check.names = FALSE\n      )\n    }\n    \n    drma_full_df <- do.call(rbind, drma_full_results_list)\n    drma_full_df$Range <- factor(drma_full_df$Range, levels = drma_range_labels)\n    \n    table_specific_ranges_numeric <- seq(0, 20, by = 2)\n    table_specific_labels <- paste0(table_specific_ranges_numeric, \"-\", table_specific_ranges_numeric + 2, \"%\")\n    \n    drma_table_df <- drma_full_df %>%\n      filter(Range %in% table_specific_labels) %>%\n      mutate(Range = factor(Range, levels = table_specific_labels))\n    \n    df$profit_loss_range_for_plot <- cut(\n      df$profit_loss_percentage,\n      breaks = drma_numeric_breaks,\n      labels = drma_range_labels,\n      right = FALSE,\n      include.lowest = TRUE\n    )\n    \n    hist_summary_df <- df %>%\n      group_by(profit_loss_range_for_plot) %>%\n      summarise(Count = n(), .groups = 'drop') %>%\n      rename(Range = profit_loss_range_for_plot)\n    \n    all_ranges_for_hist_df <- data.frame(Range = factor(drma_range_labels, levels = drma_range_labels))\n    hist_summary_df <- left_join(all_ranges_for_hist_df, hist_summary_df, by = \"Range\") %>%\n      mutate(Count = ifelse(is.na(Count), 0, Count))\n    \n    list(drma_table_df = drma_table_df, drma_full_df = drma_full_df, hist_summary_df = hist_summary_df)\n  })\n  \n  output$drma_drmaTable <- renderDT({\n    drma_results()$drma_table_df\n  }, options = list(pageLength = 10, dom = 'tip'), rownames = FALSE)\n  \n  output$drma_totalTrades <- renderText({\n    nrow(drma_filtered_data())\n  })\n  \n  output$drma_gainsLossesPlot <- renderPlot({\n    results <- drma_results()\n    hist_summary_df <- results$hist_summary_df\n    \n    if (nrow(hist_summary_df) == 0) {\n      return(NULL)\n    }\n    \n    ggplot(hist_summary_df, aes(x = Range, y = Count)) +\n      geom_bar(stat = \"identity\", fill = \"darkgreen\", color = \"black\") +\n      labs(title = \"Distribution of Gains & Losses\",\n           x = \"Profit/Loss Range\",\n           y = \"Number of Trades\") +\n      theme_minimal() +\n      theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5))\n  })\n  \n  output$drma_drmaCurvePlot <- renderPlot({\n    results <- drma_results()\n    drma_full_df <- results$drma_full_df\n    \n    if (nrow(drma_full_df) == 0) {\n      return(NULL)\n    }\n    \n    ggplot(drma_full_df, aes(x = Range, y = DRMA, fill = DRMA > 0)) +\n      geom_bar(stat = \"identity\") +\n      scale_fill_manual(values = c(\"FALSE\" = \"darkred\", \"TRUE\" = \"darkgreen\")) +\n      labs(title = \"DRMA Curve\",\n           x = \"Profit/Loss Range\",\n           y = \"DRMA Value\") +\n      theme_minimal() +\n      theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),\n            legend.position = \"none\")\n  })\n}\n\n# Run the combined Shiny application\nshinyApp(ui = ui, server = server)","type":"text"},{"name":"trade_data.csv","content":"Date,Portfolio,Activity,Symbol,SharesBought,EntryPrice,Commission,EntryNote,StopLoss,TargetPrice,TargetDate,ExitDate,ExitPrice\n2025-07-14,My Portfolio,Long,OKLO,10,56.48,0,malibu,54,60,2025-07-14,2025-07-14,57.11\n2025-07-14,Portfolio A,Long,CCL,10,29.5,0,a line,28,32,2025-07-14,2025-07-14,NA\n2025-07-14,My Portfolio,Long,CCL,10,30,0,a,28,32,2025-07-14,2025-07-14,NA\n2025-07-14,My Portfolio,Long,CAH,10,155,0,newone,150,160,2025-07-14,2025-07-14,NA\n2025-07-14,Portfolio B,Long,AIR,10,100,1,a line,98,102,2025-07-14,2025-07-14,NA\n","type":"text"}]
