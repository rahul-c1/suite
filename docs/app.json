[{"name":"app.R","content":"library(shiny)\nlibrary(dplyr)\nlibrary(lubridate)\nlibrary(readr) # For read_csv\nlibrary(DT) # For interactive tables\n\n# Function for Vince's Empirical Optimal f\ncalc_vince_optimal_f <- function(returns, f_grid = seq(0, 1, 0.01)) {\n  returns <- returns[is.finite(returns) & !is.na(returns)]\n  gmean <- function(f) {\n    r <- 1 + f * returns\n    if (any(r <= 0)) return(NA)\n    exp(mean(log(r)))\n  }\n  gmeans <- sapply(f_grid, gmean)\n  f_grid[which.max(gmeans)]\n}\n\n# --- RBAF Module (Existing) ---\nRBAF_UI <- function(id) {\n  ns <- NS(id)\n  fluidPage(\n    tags$head(\n      tags$style(HTML(\"\n        body {\n          font-family: 'Inter', sans-serif;\n          background-color: #f0f0f0;\n        }\n        .container-fluid {\n          max-width: 1000px;\n          margin-top: 20px;\n          background-color: #fff;\n          padding: 20px;\n          border-radius: 8px;\n          box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n        }\n        .panel-heading {\n          font-size: 24px;\n          font-weight: bold;\n          margin-bottom: 20px;\n          color: #333;\n          text-align: center;\n        }\n        .sidebar-panel {\n          background-color: #f9f9f9;\n          padding: 20px;\n          border-radius: 8px;\n          border: 1px solid #ddd;\n        }\n        .main-panel {\n          background-color: #f9f9f9;\n          padding: 20px;\n          border-radius: 8px;\n          border: 1px solid #ddd;\n        }\n        .form-group {\n          margin-bottom: 15px;\n        }\n        .control-label {\n          font-weight: bold;\n          color: #555;\n        }\n        .shiny-input-container {\n          margin-bottom: 10px;\n        }\n        .output-row {\n          display: flex;\n          justify-content: space-between;\n          padding: 8px 0;\n          border-bottom: 1px solid #eee;\n        }\n        .output-row:last-child {\n          border-bottom: none;\n        }\n        .output-label {\n          font-weight: normal;\n          color: #333;\n        }\n        .output-value {\n          font-weight: bold;\n          color: #000;\n          text-align: right;\n        }\n        .highlight-row {\n          background-color: #e6ffe6;\n          border-radius: 4px;\n          padding: 8px 10px;\n          margin: 5px 0;\n        }\n        .btn-custom {\n          background-color: #007bff;\n          color: white;\n          border: none;\n          padding: 10px 20px;\n          border-radius: 5px;\n          cursor: pointer;\n          font-size: 16px;\n          margin-right: 10px;\n        }\n        .btn-custom:hover {\n          background-color: #0056b3;\n        }\n        .btn-clear {\n          background-color: #6c757d;\n        }\n        .btn-clear:hover {\n          background-color: #5a6268;\n        }\n      \"))\n    ),\n    \n    div(class = \"panel-heading\", \"Result Based Assumption Forecast (RBAF)\"),\n    \n    sidebarLayout(\n      sidebarPanel(\n        class = \"sidebar-panel\",\n        h4(\"Inputs\"),\n        numericInput(ns(\"portfolio_size\"), \"Portfolio Size $:\", value = 100000, min = 0),\n        numericInput(ns(\"position_size_pct\"), \"Position Size %:\", value = 10, min = 0, max = 100),\n        numericInput(ns(\"desired_return_pct\"), \"Desired % Return:\", value = 40, min = 0, max = 100),\n        numericInput(ns(\"avg_gain_pct\"), \"Average % Gain:\", value = 12, min = 0),\n        numericInput(ns(\"winning_trades_pct\"), \"% of Winning Trades:\", value = 40, min = 0, max = 100),\n        numericInput(ns(\"avg_loss_pct\"), \"Average % Loss:\", value = 6, min = 0),\n        br(),\n        fluidRow(\n          column(6, actionButton(ns(\"clear_all\"), \"Clear All\", class = \"btn-custom btn-clear\")),\n          column(6, actionButton(ns(\"calculate\"), \"Calculate\", class = \"btn-custom\"))\n        )\n      ),\n      \n      mainPanel(\n        class = \"main-panel\",\n        h4(\"Results\"),\n        div(class = \"output-container\",\n            div(class = \"output-row\",\n                div(class = \"output-label\", \"Average $ Gain on Winning Trades:\"),\n                div(class = \"output-value\", textOutput(ns(\"avg_dollar_gain\")))\n            ),\n            div(class = \"output-row\",\n                div(class = \"output-label\", \"# of Winning Trades:\"),\n                div(class = \"output-value\", textOutput(ns(\"num_winning_trades\")))\n            ),\n            div(class = \"output-row\",\n                div(class = \"output-label\", \"Average $ Loss on Losing Trades:\"),\n                div(class = \"output-value\", textOutput(ns(\"avg_dollar_loss\")))\n            ),\n            div(class = \"output-row\",\n                div(class = \"output-label\", \"# of Losing Trades:\"),\n                div(class = \"output-value\", textOutput(ns(\"num_losing_trades\")))\n            ),\n            div(class = \"output-row highlight-row\",\n                div(class = \"output-label\", \"Gain/Loss Ratio (Non-Adjusted):\"),\n                div(class = \"output-value\", textOutput(ns(\"gain_loss_ratio_non_adj\")))\n            ),\n            div(class = \"output-row\",\n                div(class = \"output-label\", \"$ Position Size:\"),\n                div(class = \"output-value\", textOutput(ns(\"position_size_dollar\")))\n            ),\n            div(class = \"output-row\",\n                div(class = \"output-label\", \"Expected Net % Return per Trade:\"),\n                div(class = \"output-value\", textOutput(ns(\"expected_net_return_pct\")))\n            ),\n            div(class = \"output-row\",\n                div(class = \"output-label\", \"Expected $ Return per Trade:\"),\n                div(class = \"output-value\", textOutput(ns(\"expected_dollar_return\")))\n            ),\n            div(class = \"output-row\",\n                div(class = \"output-label\", \"$ Goal:\"),\n                div(class = \"output-value\", textOutput(ns(\"dollar_goal\")))\n            ),\n            div(class = \"output-row highlight-row\",\n                div(class = \"output-label\", \"Number of Trades Needed to Reach Goal:\"),\n                div(class = \"output-value\", textOutput(ns(\"trades_needed\")))\n            ),\n            div(class = \"output-row highlight-row\",\n                div(class = \"output-label\", \"Gain/Loss Ratio (Adjusted):\"),\n                div(class = \"output-value\", textOutput(ns(\"gain_loss_ratio_adj\")))\n            ),\n            div(class = \"output-row\",\n                div(class = \"output-label\", \"Optimal f:\"),\n                div(class = \"output-value\", textOutput(ns(\"optimal_f\")))\n            )\n        )\n      )\n    )\n  )\n}\n\nRBAF_Server <- function(id) {\n  moduleServer(id, function(input, output, session) {\n    calculations <- eventReactive(input$calculate, {\n      portfolio_size <- input$portfolio_size\n      position_size_pct <- input$position_size_pct / 100\n      desired_return_pct <- input$desired_return_pct / 100\n      avg_gain_pct <- input$avg_gain_pct / 100\n      winning_trades_pct <- input$winning_trades_pct / 100\n      avg_loss_pct <- input$avg_loss_pct / 100\n      \n      if (avg_loss_pct == 0) avg_loss_pct <- 1e-9\n      if (winning_trades_pct == 0 && avg_loss_pct == 0) {\n        avg_loss_pct <- 1e-9\n        avg_gain_pct <- 1e-9\n      }\n      \n      avg_dollar_gain_on_winning_trades <- avg_gain_pct * (portfolio_size * position_size_pct)\n      avg_dollar_loss_on_losing_trades <- avg_loss_pct * (portfolio_size * position_size_pct)\n      gain_loss_ratio_non_adj <- avg_gain_pct / avg_loss_pct\n      dollar_position_size <- portfolio_size * position_size_pct\n      expected_net_return_pct_per_trade <- (winning_trades_pct * avg_gain_pct) - ((1 - winning_trades_pct) * avg_loss_pct)\n      expected_dollar_return_per_trade <- expected_net_return_pct_per_trade * dollar_position_size\n      dollar_goal <- desired_return_pct * portfolio_size\n      \n      trades_needed <- if (expected_dollar_return_per_trade != 0) {\n        dollar_goal / expected_dollar_return_per_trade\n      } else {\n        Inf\n      }\n      \n      num_winning_trades <- trades_needed * winning_trades_pct\n      num_losing_trades <- trades_needed * (1 - winning_trades_pct)\n      \n      denominator_adj_ratio <- (1 - winning_trades_pct) * avg_loss_pct\n      gain_loss_ratio_adj <- if (denominator_adj_ratio != 0) {\n        (winning_trades_pct * avg_gain_pct) / denominator_adj_ratio\n      } else {\n        Inf\n      }\n      \n      optimal_f <- if (gain_loss_ratio_non_adj != 0) {\n        winning_trades_pct - ((1 - winning_trades_pct) / gain_loss_ratio_non_adj)\n      } else {\n        0\n      }\n      optimal_f <- max(0, optimal_f)\n      \n      list(\n        avg_dollar_gain = avg_dollar_gain_on_winning_trades,\n        num_winning_trades = num_winning_trades,\n        avg_dollar_loss = avg_dollar_loss_on_losing_trades,\n        num_losing_trades = num_losing_trades,\n        gain_loss_ratio_non_adj = gain_loss_ratio_non_adj,\n        position_size_dollar = dollar_position_size,\n        expected_net_return_pct = expected_net_return_pct_per_trade * 100,\n        expected_dollar_return = expected_dollar_return_per_trade,\n        dollar_goal = dollar_goal,\n        trades_needed = trades_needed,\n        gain_loss_ratio_adj = gain_loss_ratio_adj,\n        optimal_f = optimal_f * 100\n      )\n    })\n    \n    output$avg_dollar_gain <- renderText({\n      paste0(\"$\", format(round(calculations()$avg_dollar_gain, 2), nsmall = 2, big.mark = \",\"))\n    })\n    \n    output$num_winning_trades <- renderText({\n      format(round(calculations()$num_winning_trades), big.mark = \",\")\n    })\n    \n    output$avg_dollar_loss <- renderText({\n      paste0(\"$\", format(round(calculations()$avg_dollar_loss, 2), nsmall = 2, big.mark = \",\"))\n    })\n    \n    output$num_losing_trades <- renderText({\n      format(round(calculations()$num_losing_trades), big.mark = \",\")\n    })\n    \n    output$gain_loss_ratio_non_adj <- renderText({\n      format(round(calculations()$gain_loss_ratio_non_adj, 2), nsmall = 2)\n    })\n    \n    output$position_size_dollar <- renderText({\n      paste0(\"$\", format(round(calculations()$position_size_dollar, 2), nsmall = 2, big.mark = \",\"))\n    })\n    \n    output$expected_net_return_pct <- renderText({\n      paste0(format(round(calculations()$expected_net_return_pct, 2), nsmall = 2), \"%\")\n    })\n    \n    output$expected_dollar_return <- renderText({\n      paste0(\"$\", format(round(calculations()$expected_dollar_return, 2), nsmall = 2, big.mark = \",\"))\n    })\n    \n    output$dollar_goal <- renderText({\n      paste0(\"$\", format(round(calculations()$dollar_goal, 2), nsmall = 2, big.mark = \",\"))\n    })\n    \n    output$trades_needed <- renderText({\n      if (is.infinite(calculations()$trades_needed)) {\n        \"N/A (Cannot reach goal)\"\n      } else {\n        format(round(calculations()$trades_needed), big.mark = \",\")\n      }\n    })\n    \n    output$gain_loss_ratio_adj <- renderText({\n      format(round(calculations()$gain_loss_ratio_adj, 2), nsmall = 2)\n    })\n    \n    output$optimal_f <- renderText({\n      paste0(format(round(calculations()$optimal_f, 2), nsmall = 2), \"%\")\n    })\n    \n    observeEvent(input$clear_all, {\n      updateNumericInput(session, \"portfolio_size\", value = 0)\n      updateNumericInput(session, \"position_size_pct\", value = 0)\n      updateNumericInput(session, \"desired_return_pct\", value = 0)\n      updateNumericInput(session, \"avg_gain_pct\", value = 0)\n      updateNumericInput(session, \"winning_trades_pct\", value = 0)\n      updateNumericInput(session, \"avg_loss_pct\", value = 0)\n    })\n  })\n}\n\n# --- DRMA Module (Existing) ---\ndrmaUI <- function(id) {\n  ns <- NS(id)\n  fluidPage(\n    titlePanel(\"DRMA Analysis of Trading Data\"),\n    \n    sidebarLayout(\n      sidebarPanel(\n        fileInput(ns(\"file1\"), \"Upload CSV File\",\n                  multiple = FALSE,\n                  accept = c(\"text/csv\",\n                             \"text/comma-separated-values,text/plain\",\n                             \".csv\")),\n        tags$hr(),\n        helpText(\"Upload your trading data in CSV format. The CSV should contain columns like 'profit_loss', 'buy_amount', and 'status'.\")\n      ),\n      \n      mainPanel(\n        h3(\"DRMA Table\"),\n        DTOutput(ns(\"drmaTable\")),\n        br(),\n        h4(\"Total # of Complete Trades:\"),\n        textOutput(ns(\"totalTrades\"))\n      )\n    )\n  )\n}\n\ndrmaServer <- function(id) {\n  moduleServer(id, function(input, output, session) {\n    \n    filtered_data <- reactive({\n      req(input$file1)\n      df <- read_csv(input$file1$datapath, show_col_types = FALSE)\n      \n      df_complete <- df %>%\n        filter(status == \"COMPLETE\")\n      \n      df_complete <- df_complete %>%\n        mutate(profit_loss_percentage = (profit_loss / buy_amount) * 100)\n      \n      df_complete\n    })\n    \n    drma_results <- reactive({\n      df <- filtered_data()\n      total_complete_trades <- nrow(df)\n      \n      if (total_complete_trades == 0) {\n        return(data.frame(\n          Range = character(),\n          `# Gains` = numeric(),\n          `# Losses` = numeric(),\n          `% Up` = character(),\n          `% Down` = character(),\n          `Net %` = character(),\n          DRMA = numeric(),\n          check.names = FALSE\n        ))\n      }\n      \n      ranges_data <- list()\n      \n      for (i in seq(0, 20, by = 2)) {\n        lower_bound <- i\n        upper_bound <- i + 2\n        range_label <- paste0(lower_bound, \"-\", upper_bound, \"%\")\n        \n        num_gains <- df %>%\n          filter(profit_loss_percentage >= lower_bound & profit_loss_percentage < upper_bound) %>%\n          nrow()\n        \n        if (lower_bound == 0) {\n          num_losses <- df %>%\n            filter(profit_loss_percentage <= 0 & profit_loss_percentage > -upper_bound) %>%\n            nrow()\n        } else {\n          num_losses <- df %>%\n            filter(profit_loss_percentage <= -lower_bound & profit_loss_percentage > -upper_bound) %>%\n            nrow()\n        }\n        \n        percent_up <- (num_gains / total_complete_trades) * 100\n        percent_down <- (num_losses / total_complete_trades) * 100\n        \n        net_percent <- percent_up - percent_down\n        total_observations_in_range <- num_gains + num_losses\n        \n        drma <- (net_percent / 100) * total_observations_in_range\n        \n        ranges_data[[range_label]] <- data.frame(\n          Range = range_label,\n          `# Gains` = num_gains,\n          `# Losses` = num_losses,\n          `% Up` = sprintf(\"%.2f%%\", percent_up),\n          `% Down` = sprintf(\"%.2f%%\", percent_down),\n          `Net %` = sprintf(\"%.2f%%\", net_percent),\n          DRMA = round(drma, 2),\n          check.names = FALSE\n        )\n      }\n      \n      do.call(rbind, ranges_data)\n    })\n    \n    output$drmaTable <- renderDT({\n      drma_results()\n    }, options = list(pageLength = 10,\n                      dom = 'tip'),\n    rownames = FALSE)\n    \n    output$totalTrades <- renderText({\n      nrow(filtered_data())\n    })\n  })\n}\n\n# --- Position Sizing Module (Existing) ---\npositionSizingUI <- function(id) {\n  ns <- NS(id)\n  fluidPage(\n    tags$head(\n      tags$style(HTML(\"\n        body {\n          font-family: 'Inter', sans-serif;\n          background-color: #f0f2f5;\n          color: #333;\n        }\n        .container-fluid {\n          max-width: 1000px;\n          margin-top: 30px;\n          background-color: #fff;\n          padding: 25px;\n          border-radius: 10px;\n          box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n        }\n        h1 {\n          color: #0056b3;\n          margin-bottom: 25px;\n          font-size: 2em;\n          border-bottom: 2px solid #eee;\n          padding-bottom: 10px;\n        }\n        .panel {\n          border: 1px solid #ddd;\n          border-radius: 8px;\n          padding: 15px;\n          margin-bottom: 20px;\n          background-color: #fdfdfd;\n        }\n        .input-panel .form-group {\n          margin-bottom: 15px;\n        }\n        .input-panel label {\n          font-weight: bold;\n          color: #555;\n          margin-bottom: 5px;\n        }\n        .input-panel input[type='text'],\n        .input-panel .numeric-input {\n          width: 100%;\n          padding: 8px 12px;\n          border: 1px solid #ccc;\n          border-radius: 5px;\n          font-size: 1em;\n        }\n        .output-panel p {\n          font-size: 1.1em;\n          margin-bottom: 10px;\n        }\n        .output-panel strong {\n          color: #0056b3;\n        }\n        .output-panel .output-label {\n          font-weight: bold;\n          color: #333;\n        }\n        .output-panel .output-value {\n          font-weight: normal;\n          color: #000;\n        }\n        .section-header {\n          color: #0056b3;\n          border-bottom: 1px solid #eee;\n          padding-bottom: 5px;\n          margin-bottom: 15px;\n          font-size: 1.4em;\n        }\n        .r-multiples-table th, .r-multiples-table td {\n          text-align: center;\n          vertical-align: middle;\n        }\n        .btn-custom {\n          background-color: #007bff;\n          color: white;\n          border: none;\n          padding: 10px 20px;\n          border-radius: 5px;\n          cursor: pointer;\n          font-size: 16px;\n          margin-right: 10px;\n        }\n        .btn-custom:hover {\n          background-color: #0056b3;\n        }\n        .btn-clear {\n          background-color: #6c757d;\n        }\n        .btn-clear:hover {\n          background-color: #5a6268;\n        }\n      \"))\n    ),\n    \n    div(class = \"container-fluid\",\n        h1(\"Trading Position Sizing Calculator\"),\n        fluidRow(\n          column(width = 6, class = \"panel input-panel\",\n                 h3(class = \"section-header\", \"Inputs\"),\n                 numericInput(ns(\"portfolio_size\"), \"Portfolio Size ($):\", value = 100000, min = 0),\n                 numericInput(ns(\"share_price\"), \"Share Price ($):\", value = 100, min = 0),\n                 numericInput(ns(\"stop_price\"), \"Stop Price ($):\", value = 95, min = 0),\n                 numericInput(ns(\"amount_to_risk\"), \"Amount to Risk (% of Portfolio):\", value = 1, min = 0, max = 100)\n          ),\n          column(width = 6, class = \"panel output-panel\",\n                 h3(class = \"section-header\", \"Outputs\"),\n                 fluidRow(class = \"output-row\",\n                          column(6, class = \"output-label\", \"Stop Amount ($):\"),\n                          column(6, class = \"output-value\", textOutput(ns(\"stop_amount\")))\n                 ),\n                 fluidRow(class = \"output-row\",\n                          column(6, class = \"output-label\", \"# of Shares to Buy:\"),\n                          column(6, class = \"output-value\", textOutput(ns(\"num_shares\")))\n                 ),\n                 fluidRow(class = \"output-row\",\n                          column(6, class = \"output-label\", \"Amount of Position ($):\"),\n                          column(6, class = \"output-value\", textOutput(ns(\"amt_position\")))\n                 ),\n                 fluidRow(class = \"output-row\",\n                          column(6, class = \"output-label\", \"Position Size (% of Portfolio):\"),\n                          column(6, class = \"output-value\", textOutput(ns(\"position_size_pct\")))\n                 ),\n                 fluidRow(class = \"output-row\",\n                          column(6, class = \"output-label\", \"Risk on Equity (%):\"),\n                          column(6, class = \"output-value\", textOutput(ns(\"risk_equity_pct\")))\n                 )\n          )\n        ),\n        fluidRow(\n          column(12, class = \"panel\",\n                 h3(class = \"section-header\", \"R-Multiples\"),\n                 tableOutput(ns(\"r_multiples_table\"))\n          )\n        ),\n        fluidRow(\n          column(12,\n                 actionButton(ns(\"calculate_ps\"), \"Calculate\", class = \"btn-custom\"),\n                 actionButton(ns(\"clear_ps\"), \"Clear All\", class = \"btn-custom btn-clear\")\n          )\n        )\n    )\n  )\n}\n\npositionSizingServer <- function(id) {\n  moduleServer(id, function(input, output, session) {\n    output_values <- reactiveValues(\n      stop_amount = \"\",\n      num_shares = \"\",\n      amt_position = \"\",\n      position_size_pct = \"\",\n      risk_equity_pct = \"\",\n      r_multiples_data = data.frame(\n        Metric = c(\"Risk\", \"Upside target based on R\", \"% Gain\"),\n        `1R` = rep(\"\", 3), `2R` = rep(\"\", 3), `3R` = rep(\"\", 3),\n        `4R` = rep(\"\", 3), `5R` = rep(\"\", 3), `6R` = rep(\"\", 3),\n        check.names = FALSE\n      )\n    )\n    \n    observeEvent(input$calculate_ps, {\n      portfolio_size <- input$portfolio_size\n      share_price <- input$share_price\n      stop_price <- input$stop_price\n      amount_to_risk <- input$amount_to_risk / 100\n      \n      if (share_price <= stop_price) {\n        showNotification(\"Share Price must be greater than Stop Price.\", type = \"error\")\n        return()\n      }\n      if (portfolio_size <= 0) {\n        showNotification(\"Portfolio Size must be greater than 0.\", type = \"error\")\n        return()\n      }\n      \n      risk_per_share <- share_price - stop_price\n      max_dollar_risk <- portfolio_size * amount_to_risk\n      num_shares_to_buy <- floor(max_dollar_risk / risk_per_share)\n      \n      if (num_shares_to_buy <= 0) {\n        showNotification(\"Number of shares to buy is zero. Adjust inputs.\", type = \"warning\")\n        output_values$stop_amount = \"$0.00\"\n        output_values$num_shares = \"0\"\n        output_values$amt_position = \"$0.00\"\n        output_values$position_size_pct = \"0.00%\"\n        output_values$risk_equity_pct = \"0.00%\"\n        output_values$r_multiples_data = data.frame(\n          Metric = c(\"Risk\", \"Upside target based on R\", \"% Gain\"),\n          `1R` = rep(\"$0.00\", 3), `2R` = rep(\"$0.00\", 3), `3R` = rep(\"$0.00\", 3),\n          `4R` = rep(\"$0.00\", 3), `5R` = rep(\"$0.00\", 3), `6R` = rep(\"$0.00\", 3),\n          check.names = FALSE\n        )\n        return()\n      }\n      \n      amount_of_position <- num_shares_to_buy * share_price\n      position_size_percent <- (amount_of_position / portfolio_size) * 100\n      risk_on_equity_percent <- (num_shares_to_buy * risk_per_share / portfolio_size) * 100\n      \n      output_values$stop_amount <- paste0(\"$\", format(round(risk_per_share, 2), nsmall = 2, big.mark = \",\"))\n      output_values$num_shares <- format(num_shares_to_buy, big.mark = \",\")\n      output_values$amt_position <- paste0(\"$\", format(round(amount_of_position, 2), nsmall = 2, big.mark = \",\"))\n      output_values$position_size_pct <- paste0(format(round(position_size_percent, 2), nsmall = 2), \"%\")\n      output_values$risk_equity_pct <- paste0(format(round(risk_on_equity_percent, 2), nsmall = 2), \"%\")\n      \n      r_multiples_df <- data.frame(\n        Metric = c(\"Risk\", \"Upside target based on R\", \"% Gain\")\n      )\n      \n      for (r in 1:6) {\n        r_multiples_df[[paste0(r, \"R\")]] <- c(\n          paste0(\"-$\", format(round(r * risk_per_share, 2), nsmall = 2, big.mark = \",\")),\n          paste0(\"$\", format(round(share_price + (r * risk_per_share), 2), nsmall = 2, big.mark = \",\")),\n          paste0(format(round((r * risk_per_share / share_price) * 100, 2), nsmall = 2), \"%\")\n        )\n      }\n      output_values$r_multiples_data <- r_multiples_df\n    })\n    \n    observeEvent(input$clear_ps, {\n      updateNumericInput(session, \"portfolio_size\", value = 0)\n      updateNumericInput(session, \"share_price\", value = 0)\n      updateNumericInput(session, \"stop_price\", value = 0)\n      updateNumericInput(session, \"amount_to_risk\", value = 0)\n      \n      output_values$stop_amount = \"\"\n      output_values$num_shares = \"\"\n      output_values$amt_position = \"\"\n      output_values$position_size_pct = \"\"\n      output_values$risk_equity_pct = \"\"\n      output_values$r_multiples_data = data.frame(\n        Metric = c(\"Risk\", \"Upside target based on R\", \"% Gain\"),\n        `1R` = rep(\"\", 3), `2R` = rep(\"\", 3), `3R` = rep(\"\", 3),\n        `4R` = rep(\"\", 3), `5R` = rep(\"\", 3), `6R` = rep(\"\", 3),\n        check.names = FALSE\n      )\n    })\n    \n    output$stop_amount <- renderText({ output_values$stop_amount })\n    output$num_shares <- renderText({ output_values$num_shares })\n    output$amt_position <- renderText({ output_values$amt_position })\n    output$position_size_pct <- renderText({ output_values$position_size_pct })\n    output$risk_equity_pct <- renderText({ output_values$risk_equity_pct })\n    output$r_multiples_table <- renderTable({ output_values$r_multiples_data },\n                                            bordered = TRUE,\n                                            align = 'c',\n                                            class = \"r-multiples-table\")\n  })\n}\n\n# --- Simple Kelly Module ---\nsimpleKellyUI <- function(id) {\n  ns <- NS(id)\n  fluidPage(\n    tags$head(\n      tags$style(HTML(\"\n        body {\n          font-family: 'Inter', sans-serif;\n          background-color: #f0f0f0;\n        }\n        .container-fluid {\n          max-width: 1000px;\n          margin-top: 20px;\n          background-color: #fff;\n          padding: 20px;\n          border-radius: 8px;\n          box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n        }\n        .panel-heading {\n          font-size: 24px;\n          font-weight: bold;\n          margin-bottom: 20px;\n          color: #333;\n          text-align: center;\n        }\n        .sidebar-panel {\n          background-color: #f9f9f9;\n          padding: 20px;\n          border-radius: 8px;\n          border: 1px solid #ddd;\n        }\n        .main-panel {\n          background-color: #f9f9f9;\n          padding: 20px;\n          border-radius: 8px;\n          border: 1px solid #ddd;\n        }\n        .form-group {\n          margin-bottom: 15px;\n        }\n        .control-label {\n          font-weight: bold;\n          color: #555;\n        }\n        .shiny-input-container {\n          margin-bottom: 10px;\n        }\n        .output-row {\n          display: flex;\n          justify-content: space-between;\n          padding: 8px 0;\n          border-bottom: 1px solid #eee;\n        }\n        .output-row:last-child {\n          border-bottom: none;\n        }\n        .output-label {\n          font-weight: normal;\n          color: #333;\n        }\n        .output-value {\n          font-weight: bold;\n          color: #000;\n          text-align: right;\n        }\n        .highlight-row {\n          background-color: #e6ffe6;\n          border-radius: 4px;\n          padding: 8px 10px;\n          margin: 5px 0;\n        }\n        .btn-custom {\n          background-color: #007bff;\n          color: white;\n          border: none;\n          padding: 10px 20px;\n          border-radius: 5px;\n          cursor: pointer;\n          font-size: 16px;\n          margin-right: 10px;\n        }\n        .btn-custom:hover {\n          background-color: #0056b3;\n        }\n        .btn-clear {\n          background-color: #6c757d;\n        }\n        .btn-clear:hover {\n          background-color: #5a6268;\n        }\n      \"))\n    ),\n    \n    div(class = \"panel-heading\", \"Derived Kelly Criterion Calculator\"),\n    \n    sidebarLayout(\n      sidebarPanel(\n        class = \"sidebar-panel\",\n        h4(\"Inputs\"),\n        numericInput(ns(\"winning_probability\"), \"Probability of Winning (%):\", value = 50, min = 0, max = 100),\n        numericInput(ns(\"win_loss_ratio\"), \"Win/Loss Ratio (Average Gain / Average Loss):\", value = 1.5, min = 0),\n        br(),\n        fluidRow(\n          column(6, actionButton(ns(\"clear_kelly\"), \"Clear All\", class = \"btn-custom btn-clear\")),\n          column(6, actionButton(ns(\"calculate_kelly\"), \"Calculate\", class = \"btn-custom\"))\n        )\n      ),\n      \n      mainPanel(\n        class = \"main-panel\",\n        h4(\"Results\"),\n        div(class = \"output-container\",\n            div(class = \"output-row highlight-row\",\n                div(class = \"output-label\", \"Kelly Percentage (% of Bankroll to Bet):\"),\n                div(class = \"output-value\", textOutput(ns(\"kelly_percentage\")))\n            ),\n            div(class = \"output-row\",\n                div(class = \"output-label\", \"Interpretation:\"),\n                div(class = \"output-value\", textOutput(ns(\"kelly_interpretation\")))\n            )\n        )\n      )\n    )\n  )\n}\n# --- Derived Kelly Module (New) ---\nderivedKellyUI <- function(id) {\n  ns <- NS(id)\n  fluidPage(\n    titlePanel(\"Derived Kelly Criterion with Trade History\"),\n    \n    tags$head(tags$style(HTML(\"\n      .output-box { background-color: #e6f4ea; padding: 15px; border-radius: 10px; }\n      .output-row { margin-bottom: 10px; }\n      .output-label { font-weight: bold; }\n    \"))),\n    \n    fluidRow(\n      column(4,\n             fileInput(ns(\"trade_file\"), \"Upload Trade History (CSV):\",\n                       accept = c(\"text/csv\",\n                                  \"text/comma-separated-values,text/plain\",\n                                  \".csv\")),\n             p(em(\"Note: File should contain 'status', 'buy_date', 'profit_loss', and 'buy_amount' columns.\")),\n             dateInput(ns(\"start_date\"), \"Start Date:\", Sys.Date() - 365),\n             dateInput(ns(\"end_date\"), \"End Date:\", Sys.Date()),\n             numericInput(ns(\"portfolio\"), \"Portfolio Size $:\", 100000, min = 0),\n             numericInput(ns(\"position_pct\"), \"Position Size %:\", 10, min = 0, max = 100),\n             numericInput(ns(\"return_pct\"), \"Desired % Return:\", 40, min = 0, max = 100),\n             numericInput(ns(\"avg_gain\"), \"Manual Average % Gain:\", 12, min = 0, max = 100),\n             numericInput(ns(\"win_pct\"), \"Manual % of Winning Trades:\", 50, min = 0, max = 100),\n             numericInput(ns(\"avg_loss\"), \"Manual Average % Loss:\", 6, min = 0, max = 100),\n             selectInput(ns(\"optf_method\"), \"Optimal f Method:\",\n                         choices = c(\"Kelly (from manual inputs)\", \"Vince's Optimal f (from file data)\")),\n             actionButton(ns(\"calc\"), \"Calculate\"),\n             downloadButton(ns(\"download_report\"), \"Export Report CSV\"),\n             actionButton(ns(\"clear\"), \"Clear All\")\n      ),\n      \n      column(8,\n             div(class = \"output-box\", uiOutput(ns(\"results\"))),\n             br(),\n             h4(\"Filtered Trade Data\"),\n             dataTableOutput(ns(\"filtered_table\"))\n      )\n    )\n  )\n}\n\nsimpleKellyServer <- function(id) {\n  moduleServer(id, function(input, output, session) {\n    kelly_calculations <- eventReactive(input$calculate_kelly, {\n      p <- input$winning_probability / 100 # Probability of winning\n      b <- input$win_loss_ratio          # Win/Loss Ratio\n      \n      if (b <= 0) {\n        showNotification(\"Win/Loss Ratio must be greater than 0.\", type = \"error\")\n        return(list(kelly_f = 0, interpretation = \"Invalid inputs for calculation.\"))\n      }\n      \n      kelly_f <- p - ((1 - p) / b)\n      kelly_f_percent <- max(0, kelly_f) * 100\n      \n      interpretation <- if (kelly_f <= 0) {\n        \"The Kelly Criterion suggests not to bet, as your expected return is non-positive. This indicates your winning probability or win/loss ratio is too low for a positive edge.\"\n      } else if (kelly_f_percent > 0 && kelly_f_percent <= 5) {\n        \"A low Kelly percentage suggests a small edge. Bet a small portion of your bankroll.\"\n      } else if (kelly_f_percent > 5 && kelly_f_percent <= 15) {\n        \"A moderate Kelly percentage indicates a good edge. Bet a reasonable portion of your bankroll.\"\n      } else if (kelly_f_percent > 15) {\n        \"A high Kelly percentage suggests a strong edge. You can bet a larger portion of your bankroll, but be mindful of volatility.\"\n      } else {\n        \"No calculation performed or invalid inputs.\"\n      }\n      \n      list(kelly_f = kelly_f_percent, interpretation = interpretation)\n    })\n    \n    output$kelly_percentage <- renderText({\n      paste0(format(round(kelly_calculations()$kelly_f, 2), nsmall = 2), \"%\")\n    })\n    \n    output$kelly_interpretation <- renderText({\n      kelly_calculations()$interpretation\n    })\n    \n    observeEvent(input$clear_kelly, {\n      updateNumericInput(session, \"winning_probability\", value = 0)\n      updateNumericInput(session, \"win_loss_ratio\", value = 0)\n      output$kelly_percentage <- renderText({ \"\" })\n      output$kelly_interpretation <- renderText({ \"\" })\n    })\n  })\n}\n\nderivedKellyServer <- function(id) {\n  moduleServer(id, function(input, output, session) {\n    calc_data <- reactiveVal(NULL)\n    \n    trade_data <- reactive({\n      req(input$trade_file)\n      df <- read.csv(input$trade_file$datapath)\n      names(df) <- tolower(names(df))\n      req(all(c(\"status\", \"buy_date\", \"profit_loss\", \"buy_amount\") %in% names(df))) # Ensure necessary columns exist\n      df %>%\n        filter(status == \"COMPLETE\") %>%\n        mutate(buy_date = as.Date(buy_date)) %>%\n        filter(buy_date >= input$start_date & buy_date <= input$end_date)\n    })\n    \n    trade_returns <- reactive({\n      # Only proceed if file is uploaded\n      req(input$trade_file)\n      df <- trade_data()\n      # Try to get return from 'profit_loss' and 'buy_amount' first\n      if (all(c(\"profit_loss\", \"buy_amount\") %in% names(df)) && all(df$buy_amount != 0)) {\n        return(as.numeric(df$profit_loss / df$buy_amount))\n      } else {\n        showNotification(\"Could not calculate returns from 'profit_loss' and 'buy_amount'. Check file format.\", type = \"warning\")\n        return(NULL)\n      }\n    })\n    \n    \n \n    \n    \n    observeEvent(input$calc, {\n      portfolio <- input$portfolio\n      pos_pct <- input$position_pct / 100\n      desired_pct <- input$return_pct / 100\n      \n      # Determine if we should use file data or manual inputs\n      use_file_data <- input$optf_method == \"Vince's Optimal f (from file data)\" && !is.null(input$trade_file)\n      \n      if (use_file_data) {\n        # Calculate metrics from actual trade data\n        tryCatch({\n          df <- trade_data()\n          returns <- trade_returns()\n          \n          if (is.null(returns) || length(returns) == 0 || all(is.na(returns))) {\n            stop(\"No valid returns data found in the uploaded file after filtering.\")\n          }\n          \n          # Calculate actual metrics from file\n          winning_trades <- returns[returns > 0]\n          losing_trades <- returns[returns < 0]\n          total_trades_count <- length(returns)\n          \n          win_pct <- ifelse(total_trades_count > 0, length(winning_trades) / total_trades_count, 0)\n          avg_gain <- ifelse(length(winning_trades) > 0, mean(winning_trades), 0)\n          # Ensure avg_loss is positive for ratio\n          avg_loss <- ifelse(length(losing_trades) > 0, abs(mean(losing_trades)), 0)\n          lose_pct <- 1 - win_pct\n          \n          data_source <- \"Calculated from uploaded file\"\n          \n        }, error = function(e) {\n          showNotification(paste(\"Error processing file for Vince's Optimal f:\", e$message, \". Falling back to manual inputs.\"), type = \"error\", duration = 8)\n          # Fall back to manual inputs if file processing fails\n          avg_gain <- input$avg_gain / 100\n          win_pct <- input$win_pct / 100\n          avg_loss <- input$avg_loss / 100\n          lose_pct <- 1 - win_pct\n          data_source <- \"From manual inputs (file error/missing)\"\n        })\n      } else {\n        # Use manual inputs for Kelly method or when no file/Vince not selected\n        avg_gain <- input$avg_gain / 100\n        win_pct <- input$win_pct / 100\n        avg_loss <- input$avg_loss / 100\n        lose_pct <- 1 - win_pct\n        data_source <- \"From manual inputs\"\n      }\n      \n      # Handle potential division by zero for avg_loss\n      if (avg_loss == 0) avg_loss <- 1e-9 # Small positive number to avoid Inf\n      \n      pos_size <- portfolio * pos_pct\n      dollar_gain <- pos_size * avg_gain\n      dollar_loss <- pos_size * avg_loss\n      gain_loss_ratio <- avg_gain / avg_loss\n      net_pct_ret <- (win_pct * avg_gain) - (lose_pct * avg_loss)\n      net_dollar_ret <- net_pct_ret * pos_size\n      goal <- portfolio * desired_pct\n      trades_needed <- ifelse(net_dollar_ret > 0, ceiling(goal / net_dollar_ret), Inf)\n      \n      full_kelly <- ifelse(gain_loss_ratio > 0, win_pct - (lose_pct / gain_loss_ratio), 0)\n      full_kelly <- max(0, full_kelly) # Kelly should not be negative\n      half_kelly <- 0.5 * full_kelly\n      fixed_frac <- 0.02 # Assuming 2% fixed fraction as in your original code\n      \n      # Vince calculation\n      vince_ret <- if (input$optf_method == \"Vince's Optimal f (from file data)\") {\n        if (is.null(input$trade_file)) {\n          \"No file uploaded for Vince's Optimal f\"\n        } else {\n          tryCatch({\n            rts <- trade_returns()\n            if (is.null(rts) || length(rts) == 0 || all(is.na(rts))) {\n              \"Could not extract valid returns from file for Vince's\"\n            } else {\n              vof <- calc_vince_optimal_f(rts)\n              if (is.na(vof)) \"Could not compute (negative log)\" else vof\n            }\n          }, error = function(e) {\n            paste(\"Error calculating Vince's Optimal f:\", e$message)\n          })\n        }\n      } else NA # Set to NA if not the selected method\n      \n      calc_data(list(\n        dollar_gain = dollar_gain,\n        num_winners = ifelse(is.finite(trades_needed), trades_needed * win_pct, 0),\n        dollar_loss = dollar_loss,\n        num_losers = ifelse(is.finite(trades_needed), trades_needed * lose_pct, 0),\n        gain_loss_ratio = gain_loss_ratio,\n        pos_size = pos_size,\n        net_return_pct = net_pct_ret * 100,\n        net_return_dollar = net_dollar_ret,\n        goal = goal,\n        num_trades = trades_needed,\n        full_kelly = full_kelly * 100,\n        half_kelly = half_kelly * 100,\n        fixed_frac = fixed_frac * 100,\n        vince_opt_f = vince_ret,\n        method = input$optf_method,\n        data_source = data_source,\n        # Actual metrics that were used in calculation\n        actual_win_pct = win_pct * 100,\n        actual_avg_gain = avg_gain * 100,\n        actual_avg_loss = avg_loss * 100\n      ))\n    })\n    \n    observeEvent(input$clear, {\n      updateNumericInput(session, \"portfolio\", value = 100000)\n      updateNumericInput(session, \"position_pct\", value = 10)\n      updateNumericInput(session, \"return_pct\", value = 40)\n      updateNumericInput(session, \"avg_gain\", value = 12)\n      updateNumericInput(session, \"win_pct\", value = 50)\n      updateNumericInput(session, \"avg_loss\", value = 6)\n      updateSelectInput(session, \"optf_method\", selected = \"Kelly (from manual inputs)\")\n      calc_data(NULL)\n      # Reset file input (requires a small trick)\n      shinyjs::reset(\"trade_file\")\n    })\n    \n    output$results <- renderUI({\n      req(calc_data())\n      res <- calc_data()\n      \n      # Add data source information at the top\n      source_info <- div(class = \"output-row\",\n                         span(class = \"output-label\", \"Data Source:\"),\n                         sprintf(\" %s\", res$data_source),\n                         style = \"color: #0066cc; font-style: italic; margin-bottom: 15px;\")\n      \n      # Show actual metrics used when Vince method with file data\n      metrics_info <- if (res$method == \"Vince's Optimal f (from file data)\" && grepl(\"file\", res$data_source)) {\n        tagList(\n          div(class = \"output-row\", span(class = \"output-label\", \"Actual Win Rate Used:\"), sprintf(\" %.1f%%\", res$actual_win_pct)),\n          div(class = \"output-row\", span(class = \"output-label\", \"Actual Avg Gain Used:\"), sprintf(\" %.2f%%\", res$actual_avg_gain)),\n          div(class = \"output-row\", span(class = \"output-label\", \"Actual Avg Loss Used:\"), sprintf(\" %.2f%%\", res$actual_avg_loss)),\n          hr()\n        )\n      } else {\n        NULL\n      }\n      \n      base_results <- tagList(\n        div(class = \"output-row\", span(class = \"output-label\", \"Avg $ Gain on Wins:\"), sprintf(\" $%.2f\", res$dollar_gain)),\n        div(class = \"output-row\", span(class = \"output-label\", \"# Winning Trades:\"),\n            if (is.finite(res$num_trades)) sprintf(\" %.1f\", res$num_winners) else \" ∞ (negative expected return)\"),\n        div(class = \"output-row\", span(class = \"output-label\", \"Avg $ Loss on Losses:\"), sprintf(\" $%.2f\", res$dollar_loss)),\n        div(class = \"output-row\", span(class = \"output-label\", \"# Losing Trades:\"),\n            if (is.finite(res$num_trades)) sprintf(\" %.1f\", res$num_losers) else \" ∞ (negative expected return)\"),\n        div(class = \"output-row\", span(class = \"output-label\", \"Gain/Loss Ratio:\"), sprintf(\" %.2f\", res$gain_loss_ratio)),\n        div(class = \"output-row\", span(class = \"output-label\", \"Position Size $:\"), sprintf(\" $%.2f\", res$pos_size)),\n        div(class = \"output-row\", span(class = \"output-label\", \"Expected Net %/Trade:\"), sprintf(\" %.2f%%\", res$net_return_pct)),\n        div(class = \"output-row\", span(class = \"output-label\", \"Expected $/Trade:\"), sprintf(\" $%.2f\", res$net_return_dollar)),\n        div(class = \"output-row\", span(class = \"output-label\", \"$ Goal:\"), sprintf(\" $%.2f\", res$goal)),\n        div(class = \"output-row\", span(class = \"output-label\", \"# Trades Needed:\"),\n            if (is.finite(res$num_trades)) sprintf(\" %d\", res$num_trades) else \" ∞ (negative expected return)\")\n      )\n      \n      optimal_f_section <- if (res$method == \"Kelly (from manual inputs)\") {\n        tagList(\n          hr(),\n          h4(\"Kelly Criterion Calculations\"),\n          div(class = \"output-row\", span(class = \"output-label\", \"Full Kelly f:\"), sprintf(\" %.2f%%\", res$full_kelly)),\n          div(class = \"output-row\", span(class = \"output-label\", \"Half Kelly f:\"), sprintf(\" %.2f%%\", res$half_kelly)),\n          div(class = \"output-row\", span(class = \"output-label\", \"Fixed 2%% f:\"), sprintf(\" %.2f%%\", res$fixed_frac))\n        )\n      } else { # Vince's Optimal f (from file data)\n        tagList(\n          hr(),\n          h4(\"Vince's Optimal f Calculation\"),\n          div(class = \"output-row\", span(class = \"output-label\", \"Vince Optimal f:\"),\n              if (is.character(res$vince_opt_f)) {\n                paste(\" \", res$vince_opt_f)\n              } else if (is.na(res$vince_opt_f)) {\n                \" Could not compute\"\n              } else {\n                sprintf(\" %.2f%%\", res$vince_opt_f * 100)\n              })\n        )\n      }\n      tagList(source_info, metrics_info, base_results, optimal_f_section)\n    })\n    \n    output$filtered_table <- renderDataTable({\n      if (!is.null(input$trade_file) && nrow(trade_data()) > 0) {\n        trade_data() %>%\n          select(-profit_loss, -buy_amount) %>% # Remove raw columns if you want to show derived ones\n          mutate(`Profit/Loss %` = trade_returns() * 100) # Add derived %\n      } else {\n        data.frame(Message = \"No trade file uploaded or no complete trades in selected date range.\")\n      }\n    }, options = list(pageLength = 10, dom = 'tip'), rownames = FALSE)\n    \n    output$download_report <- downloadHandler(\n      filename = function() {\n        paste0(\"DerivedKelly_report_\", Sys.Date(), \".csv\")\n      },\n      content = function(file) {\n        res <- calc_data()\n        df <- as.data.frame(res, stringsAsFactors = FALSE)\n        write.csv(df, file, row.names = FALSE)\n      }\n    )\n  })\n}\n\n\n# --- Main App UI and Server ---\nui <- navbarPage(\n  \"Trading Analysis Suite\",\n  tabPanel(\"RBAF\", RBAF_UI(\"rbaf_module\")),\n  tabPanel(\"DRMA Analysis\", drmaUI(\"drma_module\")),\n  tabPanel(\"Position Sizing\", positionSizingUI(\"position_sizing_module\")),\n  tabPanel(\"Simple Kelly\", simpleKellyUI(\"simple_kelly_module\")), # New tab added here\n  tabPanel(\"Derived Kelly\", derivedKellyUI(\"derived_kelly_module\")) # New tab added here\n)\n\nserver <- function(input, output, session) {\n  # Add shinyjs to the server to enable reset function for file input\n  library(shinyjs)\n  enableBookmarking(store = \"url\") # If you want to keep bookmarking\n  \n  RBAF_Server(\"rbaf_module\")\n  drmaServer(\"drma_module\")\n  positionSizingServer(\"position_sizing_module\")\n  simpleKellyServer(\"simple_kelly_module\")\n  derivedKellyServer(\"derived_kelly_module\") # New server module call here\n}\n\nshinyApp(ui = ui, server = server)","type":"text"}]
